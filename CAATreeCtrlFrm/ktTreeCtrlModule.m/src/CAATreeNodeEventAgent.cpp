// COPYRIGHT Dassault Systemes 2010
//===================================================================
//
// CAATreeNodeEventAgent.cpp
// Header definition of CAATreeNodeEventAgent
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//
//  Feb 2010  Creation: Code generated by the CAA wizard  user
//===================================================================
#include "CAATreeNodeEventAgent.h"

#include "CATCallbackManager.h"

#include "CATITreeNodeSelectStatus.h"

#include "CATNavigController.h"

#include "CATINavigElement.h"

#include "CATITreeNodeContent.h"

#include "TreeNodeSelectNotif.h"

#include "TreeNodeCxtMenuNotif.h"

#include "CATIRedrawEvent.h"


 
CATImplementClass( CAATreeNodeEventAgent,
                   Implementation, 
                   CATEventSubscriber,
                   CATNull );
 
//-----------------------------------------------------------------------------
// CAATreeNodeEventAgent : constructor
//-----------------------------------------------------------------------------
CAATreeNodeEventAgent::CAATreeNodeEventAgent(CATNavigBox * pNavigBox):
    CATEventSubscriber()
{
	CurrentSelectTreeNode = NULL;
	pMonitorNavigBox = pNavigBox;



	CATListValCATBaseUnknown_var *pList = NULL ;

	pList = pMonitorNavigBox->GetAllRoots();

	if (pList != NULL)
	{
		for(int i = 1;i<=pList->Size();i++)
		{
			CATBaseUnknown * pObject = NULL ;
			pObject = (*pList)[i];
 			if (pObject != NULL)
			{
				AddTreeNodeObjToListen(pObject);
			}
		}

		delete pList;
	}
}

//-----------------------------------------------------------------------------
// CAATreeNodeEventAgent : destructor
//-----------------------------------------------------------------------------
CAATreeNodeEventAgent::~CAATreeNodeEventAgent()
{

	CATListValCATBaseUnknown_var *pList = NULL ;

	pList = pMonitorNavigBox->GetAllRoots();

	if (pList != NULL)
	{
		for(int i = 1;i<=pList->Size();i++)
		{
			CATBaseUnknown * pObject = NULL ;
			pObject = (*pList)[i];
 			if (pObject != NULL)
			{
				RemoveTreeNodeObjToListen(pObject);
			}
		}

		delete pList;
	}

	if (CurrentSelectTreeNode != NULL)
	{
		CurrentSelectTreeNode -> Release();
		CurrentSelectTreeNode = NULL;
	}

	pMonitorNavigBox = NULL;
}
 
//-----------------------------------------------------------------------------
// CAATreeNodeEventAgent : copy constructor
//-----------------------------------------------------------------------------
CAATreeNodeEventAgent::CAATreeNodeEventAgent(CAATreeNodeEventAgent& original):
   CATEventSubscriber(original)
{
}
 
//-----------------------------------------------------------------------------
// CAATreeNodeEventAgent : equal operator
//-----------------------------------------------------------------------------
CAATreeNodeEventAgent& CAATreeNodeEventAgent::operator=(CAATreeNodeEventAgent& original)
{
   CATEventSubscriber::operator=(original);
   return *this;
}
 



void CAATreeNodeEventAgent::GetCurrentSelectNode (CATBaseUnknown ** pCurrentSelectTreeNode)
{
	if (pCurrentSelectTreeNode == NULL)
	{
		return ;
	}

	(*pCurrentSelectTreeNode) = CurrentSelectTreeNode;

	if ( NULL != CurrentSelectTreeNode )
	{
		(*pCurrentSelectTreeNode) -> AddRef();
	}
}


void CAATreeNodeEventAgent::TreeNodeSelectNotifAgent(CATCallbackEvent event, void * client, CATNotification * iNotification,
									CATSubscriberData data, CATCallback callback)
{
	HRESULT rc;

	if (CurrentSelectTreeNode != NULL)
	{
		CATITreeNodeSelectStatus * piOldTreeNodeSelectStatus = NULL;

		rc = CurrentSelectTreeNode -> QueryInterface(IID_CATITreeNodeSelectStatus,(void**)&piOldTreeNodeSelectStatus);

		piOldTreeNodeSelectStatus -> SetSelectStatus(0);



		CATIRedrawEvent * piRedrawEvent = NULL;                
		rc =CurrentSelectTreeNode->QueryInterface(IID_CATIRedrawEvent, (void**)&piRedrawEvent);
		if (SUCCEEDED(rc))
		{
			piRedrawEvent->Redraw();

			piRedrawEvent->Release();
			piRedrawEvent= NULL ;
		}



		piOldTreeNodeSelectStatus->Release();
		piOldTreeNodeSelectStatus = NULL;


		CurrentSelectTreeNode -> Release();
		CurrentSelectTreeNode = NULL;



		//const CATNavigController * pNavigController = NULL;

		//pNavigController = pMonitorNavigBox->GetController();

		//CATListValCATBaseUnknown_var * pNodeList = NULL ;
  //      pNodeList = pNavigController -> GetAssociatedElements(CurrentSelectTreeNode);

		//if (pNodeList != NULL)
		//{
		//	int nbNodes = pNodeList->Size();
		//	for ( int i= 1 ; i <= nbNodes ; i++ )
		//	{
		//		CATBaseUnknown_var spNode = (*pNodeList)[i];

		//		if ( NULL_var != spNode )
		//		{
		//			CATINavigElement_var spNavigElement = spNode ;

		//			if ( NULL_var != spNavigElement )
		//			{
		//				spNavigElement -> Update();
		//			}
		//		}

		//	}

		//   delete pNodeList ;
  //         pNodeList = NULL ;
		//}
	}



	CurrentSelectTreeNode = (CATBaseUnknown * )data;

	CurrentSelectTreeNode -> AddRef();



	CATITreeNodeSelectStatus * piNewTreeNodeSelectStatus = NULL;

	rc = CurrentSelectTreeNode -> QueryInterface(IID_CATITreeNodeSelectStatus,(void**)&piNewTreeNodeSelectStatus);

	piNewTreeNodeSelectStatus -> SetSelectStatus(1);



	CATIRedrawEvent * piNewRedrawEvent = NULL;                
	rc =CurrentSelectTreeNode->QueryInterface(IID_CATIRedrawEvent, (void**)&piNewRedrawEvent);
	if (SUCCEEDED(rc))
	{
		piNewRedrawEvent->Redraw();

		piNewRedrawEvent->Release();
		piNewRedrawEvent= NULL ;
	}



	piNewTreeNodeSelectStatus->Release();
	piNewTreeNodeSelectStatus = NULL;


	GetCallbackManager() -> DispatchCallbacks(iNotification,this);

}


void CAATreeNodeEventAgent::TreeNodeCxtMenuNotifAgent(CATCallbackEvent event, void * client, CATNotification * iNotification,
									CATSubscriberData data, CATCallback callback)
{
	//CurrentSelectTreeNode = (CATBaseUnknown * )data;

	GetCallbackManager() -> DispatchCallbacks(iNotification,this);

}

void CAATreeNodeEventAgent::AddTreeNodeObjToListen(CATBaseUnknown * piTreeNodeObj)
{
	HRESULT rc ;

	CATITreeNodeContent * piTreeNodeContent = NULL;

	rc = piTreeNodeObj -> QueryInterface(IID_CATITreeNodeContent,(void**)&piTreeNodeContent);

	if (SUCCEEDED(rc) && piTreeNodeContent!=NULL)
	{
		AddCallback(piTreeNodeObj, TreeNodeSelectNotif::ClassName(), 
			(CATSubscriberMethod)&CAATreeNodeEventAgent::TreeNodeSelectNotifAgent,piTreeNodeObj);


		AddCallback(piTreeNodeObj, TreeNodeCxtMenuNotif::ClassName(), 
			(CATSubscriberMethod)&CAATreeNodeEventAgent::TreeNodeCxtMenuNotifAgent,piTreeNodeObj);


		int Count = 0;
		piTreeNodeContent -> GetNumberOfSubTreeNodeObj(&Count);

		if (Count > 0)
		{
			for (int i=1;i<=Count;i++)
			{
				CATBaseUnknown * pObject = NULL ;
                piTreeNodeContent -> GetSubTreeNodeObj(i, &pObject);

				if (pObject != NULL)
				{
					AddTreeNodeObjToListen(pObject);

					pObject -> Release();
					pObject = NULL;
				}
			}
		}


		piTreeNodeContent -> Release();
		piTreeNodeContent = NULL;
	}

	return;
}

void CAATreeNodeEventAgent::RemoveTreeNodeObjToListen(CATBaseUnknown * piTreeNodeObj)
{
	HRESULT rc ;

	CATITreeNodeContent * piTreeNodeContent = NULL;

	rc = piTreeNodeObj -> QueryInterface(IID_CATITreeNodeContent,(void**)&piTreeNodeContent);

	if (SUCCEEDED(rc) && piTreeNodeContent!=NULL)
	{
		RemoveSubscriberCallbacks(piTreeNodeObj);

		int Count = 0;
		piTreeNodeContent -> GetNumberOfSubTreeNodeObj(&Count);

		if (Count > 0)
		{
			for (int i=1;i<=Count;i++)
			{
				CATBaseUnknown * pObject = NULL ;
                piTreeNodeContent -> GetSubTreeNodeObj(i, &pObject);

				if (pObject != NULL)
				{
					RemoveTreeNodeObjToListen(pObject);

					pObject -> Release();
					pObject = NULL;
				}
			}
		}


		piTreeNodeContent -> Release();
		piTreeNodeContent = NULL;
	}

	return ;
}