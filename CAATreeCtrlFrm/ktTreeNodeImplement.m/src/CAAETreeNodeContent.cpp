// COPYRIGHT Dassault Systemes 2010
//===================================================================
//
// CAAETreeNodeContent.cpp
// Provide implementation to interface
//    CATITreeNodeContent
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//  Feb 2010  Creation: Code generated by the CAA wizard  user
//===================================================================
#include "CAAETreeNodeContent.h"

#include "CAAETreeNodeContent.h"

#include "CATListOfCATBaseUnknown.h"


 
CATImplementClass(CAAETreeNodeContent,
                  DataExtension,
                  CATBaseUnknown,
                  CATTreeNodeObj );
 

//-----------------------------------------------------------------------------
// CAAETreeNodeContent : constructor
//-----------------------------------------------------------------------------
CAAETreeNodeContent::CAAETreeNodeContent():
    CATBaseUnknown(),_pContent(NULL),_pFatherNode(NULL)
{
	_pSubTreeNodeObjList = new CATLISTP(CATBaseUnknown);
}

//-----------------------------------------------------------------------------
// CAAETreeNodeContent : destructor
//-----------------------------------------------------------------------------
CAAETreeNodeContent::~CAAETreeNodeContent()
{
	_pContent = NULL;


	if (_pFatherNode != NULL)
	{
		_pFatherNode -> Release();
		_pFatherNode = NULL;
	}


	EmptySubTree();

	delete _pSubTreeNodeObjList;
	_pSubTreeNodeObjList = NULL;
}
 
// Link the implementation to its interface
// ---------------------------------------



//TIE or TIEchain definitions
#include "TIE_CATITreeNodeContent.h"
TIE_CATITreeNodeContent( CAAETreeNodeContent);


//Methods implementation

//-----------------------------------------------------------------------------
// Implements CATITreeNodeContent::SetNodeContent
//-----------------------------------------------------------------------------
HRESULT CAAETreeNodeContent::SetNodeContent (int iContent)
{
	_pContent = iContent ;

	return S_OK;
}

//-----------------------------------------------------------------------------
// Implements CATITreeNodeContent::GetNodeContent
//-----------------------------------------------------------------------------
HRESULT CAAETreeNodeContent::GetNodeContent (int oContent)
{
	oContent = _pContent;

	return S_OK;
}

//-----------------------------------------------------------------------------
// Implements CATITreeNodeContent::SetName
//-----------------------------------------------------------------------------
HRESULT CAAETreeNodeContent::SetName (const CATUnicodeString &  iName)
{
	_Name = iName;

	return S_OK;
}

//-----------------------------------------------------------------------------
// Implements CATITreeNodeContent::GetName
//-----------------------------------------------------------------------------
HRESULT CAAETreeNodeContent::GetName (CATUnicodeString &  oName)
{
	oName = _Name;

    return S_OK;
}

//-----------------------------------------------------------------------------
// Implements CATITreeNodeContent::GetFatherNode
//-----------------------------------------------------------------------------
HRESULT CAAETreeNodeContent::GetFatherNode (CATBaseUnknown **  oFatherNode)
{
	if ( NULL == oFatherNode) 
	{
		return E_FAIL;
	}

	*oFatherNode = _pFatherNode;

	if ( NULL != _pFatherNode )
	{
		(*oFatherNode) -> AddRef();
	}

	return S_OK;
}

//-----------------------------------------------------------------------------
// Implements CATITreeNodeContent::SetFatherNode
//-----------------------------------------------------------------------------
HRESULT CAAETreeNodeContent::SetFatherNode (CATBaseUnknown *  iFatherNode)
{
	if ( NULL != _pFatherNode)
	{
		_pFatherNode->Release();

		_pFatherNode = NULL;
	}

	_pFatherNode = iFatherNode ;

	if ( NULL != _pFatherNode)
	{	
		_pFatherNode->AddRef();
	}

	return S_OK;
}

//-----------------------------------------------------------------------------
// Implements CATITreeNodeContent::GetNumberOfSubTreeNodeObj
//-----------------------------------------------------------------------------
HRESULT CAAETreeNodeContent::GetNumberOfSubTreeNodeObj (int *  oCount)
{
	if ((oCount == NULL) || (_pSubTreeNodeObjList == NULL))
		return E_FAIL;

	*oCount = _pSubTreeNodeObjList->Size();

	return S_OK;
}

//-----------------------------------------------------------------------------
// Implements CATITreeNodeContent::GetSubTreeNodeObj
//-----------------------------------------------------------------------------
HRESULT CAAETreeNodeContent::GetSubTreeNodeObj (int  iRank , CATBaseUnknown **  oObject)
{
	if ((oObject == NULL) || (_pSubTreeNodeObjList == NULL))
		return E_FAIL;

	if((iRank < 1) || (iRank > _pSubTreeNodeObjList->Size()))
	{
		return E_FAIL;
	}
	else
	{
		*oObject = (*_pSubTreeNodeObjList)[iRank];

		if (*oObject != NULL)
		{
			(*oObject) -> AddRef();
			return S_OK;
		}
		else
			return E_FAIL;
	}
}

//-----------------------------------------------------------------------------
// Implements CATITreeNodeContent::AddSubTreeNodeObj
//-----------------------------------------------------------------------------
HRESULT CAAETreeNodeContent::AddSubTreeNodeObj (CATBaseUnknown *  iObject)
{
	if((iObject == NULL) || (_pSubTreeNodeObjList == NULL))
		return E_FAIL;

	CATITreeNodeContent * piTreeNodeContent = NULL;
	HRESULT rc = iObject -> QueryInterface(IID_CATITreeNodeContent,(void**)&piTreeNodeContent);
	if (SUCCEEDED(rc))
	{
		piTreeNodeContent -> SetFatherNode(this);		
		piTreeNodeContent -> Release();
		piTreeNodeContent = NULL;

		_pSubTreeNodeObjList -> Append(iObject);
		iObject -> AddRef();
	}

	return S_OK;
}

//-----------------------------------------------------------------------------
// Implements CATITreeNodeContent::RemoveSubTreeNodeObj
//-----------------------------------------------------------------------------
HRESULT CAAETreeNodeContent::RemoveSubTreeNodeObj (CATBaseUnknown *  iObject)
{
	if ((iObject == NULL) || (_pSubTreeNodeObjList == NULL))
		return E_FAIL;

	CATITreeNodeContent * piTreeNodeContent = NULL;
	HRESULT rc = iObject -> QueryInterface(IID_CATITreeNodeContent,(void**)&piTreeNodeContent);
	if (SUCCEEDED(rc))
	{
		piTreeNodeContent -> SetFatherNode(NULL);
		piTreeNodeContent -> Release();
		piTreeNodeContent = NULL;

		_pSubTreeNodeObjList -> RemoveValue(iObject);
		iObject -> Release();
		iObject = NULL;
	}

	return S_OK;
}

//-----------------------------------------------------------------------------
// Implements CATITreeNodeContent::EmptySubTree
//-----------------------------------------------------------------------------
HRESULT CAAETreeNodeContent::EmptySubTree ()
{
	if (_pSubTreeNodeObjList == NULL)
		return E_FAIL;

	HRESULT rc = E_FAIL;

	for (int i =1; i<= _pSubTreeNodeObjList->Size(); i++)
	{
		CATITreeNodeContent * piTreeNodeContent = NULL;

		CATBaseUnknown * pList_i = (*_pSubTreeNodeObjList)[i];
		rc = E_FAIL;

		if (pList_i)
			rc = pList_i -> QueryInterface(IID_CATITreeNodeContent,(void**)&piTreeNodeContent);

		if (SUCCEEDED(rc))
		{
			piTreeNodeContent -> SetFatherNode(NULL);

			piTreeNodeContent -> Release();

			piTreeNodeContent = NULL;
		}
	}

	while(_pSubTreeNodeObjList->Size() != 0)
	{
		CATBaseUnknown * pObject = (*_pSubTreeNodeObjList)[1];

		if (pObject != NULL)
		{
			_pSubTreeNodeObjList -> RemoveValue(pObject);

			pObject -> Release();

			pObject = NULL;
		}
	}

	return S_OK;
}

//-----------------------------------------------------------------------------
// Implements CATITreeNodeContent::Locate
//-----------------------------------------------------------------------------
HRESULT CAAETreeNodeContent::Locate(CATBaseUnknown * iSubTreeNode, int * oRank)
{
	if ((iSubTreeNode == NULL) || (_pSubTreeNodeObjList == NULL))
		return E_FAIL;


	*oRank = _pSubTreeNodeObjList -> Locate(iSubTreeNode);

	return S_OK;
}

//-----------------------------------------------------------------------------
// Implements CATITreeNodeContent::SetIconName
//-----------------------------------------------------------------------------
HRESULT CAAETreeNodeContent::SetIconName (const CATUnicodeString &  iIconName)
{
	_IconName = iIconName;

	return S_OK;
}


//-----------------------------------------------------------------------------
// Implements CATITreeNodeContent::GetIconName
//-----------------------------------------------------------------------------
HRESULT CAAETreeNodeContent::GetIconName (CATUnicodeString &  oIconName)
{
	oIconName = _IconName;

    return S_OK;
}