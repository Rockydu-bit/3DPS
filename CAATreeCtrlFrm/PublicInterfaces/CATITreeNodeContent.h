// COPYRIGHT Dassault Systemes 2010
//===================================================================
//
// CATITreeNodeContent.h
// Define the CATITreeNodeContent interface
//
//===================================================================
//
// Usage notes:
//   New interface: describe its use here
//
//===================================================================
//
//  Feb 2010  Creation: Code generated by the CAA wizard  user
//===================================================================
#ifndef CATITreeNodeContent_H
#define CATITreeNodeContent_H

#include "ktTreeNodeInterface.h"
#include "CATBaseUnknown.h"

#include "CATUnicodeString.h"

#ifndef LOCAL_DEFINITION_FOR_IID
extern ExportedByktTreeNodeInterface IID IID_CATITreeNodeContent;
#else
extern "C" const IID IID_CATITreeNodeContent ;
#endif

//------------------------------------------------------------------

/**
* Interface representing xxx.
*
* <br><b>Role</b>: Components that implement
* CATITreeNodeContent are ...
* <p>
* Do not use the CATITreeNodeContent interface for such and such

*
* @example
*  // example is optional
*  CATITreeNodeContent* currentDisplay = NULL;
*  rc = window-&gt;QueryInterface(IID_CATITreeNodeContent,
*                                     (void**) &amp;currentDisplay);
*
* @href ClassReference, Class#MethodReference, #InternalMethod...
*/
class ExportedByktTreeNodeInterface CATITreeNodeContent: public CATBaseUnknown
{
  CATDeclareInterface;

  public:

    /**
     * Remember that interfaces define only virtual pure methods.
     * Dont forget to document your methods.
     * <dl>
     * <dt><b>Example:</b>
     * <pre>
     *       
           *   MyFunction does this and that
           *   @param Arg1
           *      The first argument of MyFunction.
           *   @return
           *      Error code of function.
           * 
     * virtual int MyFunction (int Arg1) = 0;
     * </pre>
     * </dl>
     */

  // No constructors or destructors on this pure virtual base class
  // --------------------------------------------------------------

	  virtual HRESULT SetNodeContent(int iContent) = 0;
	  virtual HRESULT GetNodeContent(int oContent) = 0;


	  virtual HRESULT SetName(const CATUnicodeString & iName) = 0;
	  virtual HRESULT GetName(CATUnicodeString & oName) = 0;


	  virtual HRESULT SetIconName(const CATUnicodeString & iIconName) = 0;
	  virtual HRESULT GetIconName(CATUnicodeString & oIconName) = 0;


	  virtual HRESULT GetFatherNode(CATBaseUnknown ** oFatherNode) = 0;
	  virtual HRESULT SetFatherNode(CATBaseUnknown * iFatherNode) = 0;


	  virtual HRESULT GetNumberOfSubTreeNodeObj(int * oCount) = 0;
	  virtual HRESULT GetSubTreeNodeObj(int iRank,CATBaseUnknown ** oObject) = 0;


	  virtual HRESULT Locate(CATBaseUnknown * iSubTreeNode, int * oRank) = 0;


	  virtual HRESULT AddSubTreeNodeObj(CATBaseUnknown * iObject) = 0;
	  virtual HRESULT RemoveSubTreeNodeObj(CATBaseUnknown * iObject) = 0;
	  virtual HRESULT EmptySubTree() = 0;
};

//------------------------------------------------------------------

#endif