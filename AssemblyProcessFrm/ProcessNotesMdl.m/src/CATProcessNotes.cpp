// COPYRIGHT Dassault Systemes 2015
//===================================================================
//
// CATProcessNotes.cpp
// Header definition of CATProcessNotes
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//
//  Oct 2015  Creation: Code generated by the CAA wizard  WANGJIAPENG
//===================================================================
#include "CATProcessNotes.h"
#include "shlwapi.h"

#pragma comment(lib,"Shlwapi.lib")
 
CATImplementClass( CATProcessNotes,
                   Implementation, 
                   CATStringObject,
                   CATNull );
 
CATProcessNotes* CATProcessNotes::m_pProcessNotes = NULL;
//-----------------------------------------------------------------------------
// CATProcessNotes : constructor
//-----------------------------------------------------------------------------
CATProcessNotes::CATProcessNotes():
    CATStringObject()
{
}

//-----------------------------------------------------------------------------
// CATProcessNotes : destructor
//-----------------------------------------------------------------------------
CATProcessNotes::~CATProcessNotes()
{
}

CATProcessNotes* CATProcessNotes::GetInstance()
{
	if (m_pProcessNotes == NULL)
	{
		m_pProcessNotes = new CATProcessNotes();
	}
	return m_pProcessNotes;
}

//-----------------------------------------------------------------------------
// CATProcessNotes : copy constructor
//-----------------------------------------------------------------------------
CATProcessNotes::CATProcessNotes(CATProcessNotes& original):
   CATStringObject(original)
{
}
 
//-----------------------------------------------------------------------------
// CATProcessNotes : equal operator
//-----------------------------------------------------------------------------
CATProcessNotes& CATProcessNotes::operator=(CATProcessNotes& original)
{
   CATStringObject::operator=(original);
   return *this;
}

CATBoolean CATProcessNotes::GetSetUpInfo(CATUnicodeString strFont,CATUnicodeString strColor,CATUnicodeString strSize,CATUnicodeString strFigure,CATUnicodeString strPosition)
{
	m_strFont = GetSubtitleFont(strFont);
	m_strColor = GetSubtitleColor(strColor);
	m_strSize = GetSubtitleSize(strSize);
	m_strFigure = GetSubtitleFigure(strFigure);
	m_strPosition = GetSubtitlePosition(strPosition);
	m_strSetUp = m_strFont + m_strColor + m_strSize + m_strPosition + m_strFigure;

	return TRUE;
}

CString CATProcessNotes::GetSubtitleFont(CATUnicodeString strFont)
{
	CString str = _T("");
	str = ConvertToCString(strFont);
	str = _T("{\\fn") + str + _T("}");

	return str;
}

CString CATProcessNotes::GetSubtitleColor(CATUnicodeString strColor)
{
	CString str = _T("");
	if (strColor == "白色")
	{
		str = _T("<font color=white>");
	}
	if (strColor == "红色")
	{
		str = _T("<font color=red>");
	}
	if (strColor == "绿色")
	{
		str = _T("<font color=green>");
	}
	if (strColor == "蓝色")
	{
		str = _T("<font color=blue>");
	}
	if (strColor == "青色")
	{
		str = _T("<font color=#00FFFF>");
	}
	if (strColor == "黄色")
	{
		str = _T("<font color=yellow>");
	}
	if (strColor == "黑色")
	{
		str = _T("<font color=black>");
	}
	if (strColor == "紫色")
	{
		str = _T("<font color=purple>");
	}
	if (strColor == "灰色")
	{
		str = _T("<font color=grey>");
	}
	if (strColor == "橙色")
	{
		str = _T("<font color=orange>");
	}

	return str;
}

CString CATProcessNotes::GetSubtitleSize(CATUnicodeString strSize)
{
	CString str = _T("");
	str = ConvertToCString(strSize);
	str = _T("{\\fs") + str + _T("}");

	return str;
}

CString CATProcessNotes::GetSubtitleFigure(CATUnicodeString strFigure)
{
	CString str = _T("");
	if (strFigure == "常规")
	{
		str = _T("");
	}
	if (strFigure == "斜体")
	{
		str = _T("<i>");
	}
	if (strFigure == "下划线")
	{
		str = _T("<u>");
	}
	if (strFigure == "斜体+下划线")
	{
		str = _T("<i><u>");
	}

	return str;
}

CString CATProcessNotes::GetSubtitlePosition(CATUnicodeString strPosition)
{
	CString str = _T("");
	if (strPosition == "左对齐")
	{
		str = _T("{\\a1}");
	}
	if (strPosition == "居中")
	{
		str = _T("{\\a2}");
	}
	if (strPosition == "右对齐")
	{
		str = _T("{\\a3}");
	}
	if (strPosition == "左上对齐")
	{
		str = _T("{\\a5}");
	}
	if (strPosition == "上居中")
	{
		str = _T("{\\a6}");
	}
	if (strPosition == "右上对齐")
	{
		str = _T("{\\a7}");
	}
	if (strPosition == "左中心")
	{
		str = _T("{\\a9}");
	}
	if (strPosition == "中心")
	{
		str = _T("{\\a10}");
	}
	if (strPosition == "右中心")
	{
		str = _T("{\\a11}");
	}

	return str;
}

CATBoolean CATProcessNotes::GenerateSubtitles(CATUnicodeString strStart,CATUnicodeString strEnd,CATUnicodeString strContent,CATUnicodeString strPath)
{
	//读取已存在的字幕文件
	GetSubtitles(strPath);
	CString strtotal;
	int time = 0;
	int mimutes = 0;
	int seconds = 0;
	int milliseconds = 0;
	double start = _ttol(ConvertToCString(strStart));//开始时间
	double end = _ttol(ConvertToCString(strEnd));//结束时间
	CString strSubtitle = ConvertToCString(strContent);
	GetRefreshFlag(start,end,strSubtitle);
	CString strSrt = ConvertToCString(strPath);
	strSrt.Replace(_T(".avi"),_T(".srt"));
	if (strSrt == _T(""))
	{
		return FALSE;
	}
	CStdioFile fifFile(strSrt,CFile::modeReadWrite|CFile::modeCreate);
	for (int i=0; i<ProcessSubtitle.GetSize(); i++)
	{
		strtotal = _T("");
		//写入编号
		fifFile.WriteString(_T("1\n"));
		//写入开始的时
		time = (int)ProcessSubtitle.GetAt(i)->movestart/3600;
		if (time > 9)
		{
			strtotal.Format(_T("%d"),time);
		}
		else
		{
			strtotal.Format(_T("0%d"),time);
		}
		//写入开始的分
		mimutes = (int)((ProcessSubtitle.GetAt(i)->movestart - 3600*time)/60);
		if (mimutes > 9)
		{
			strtotal.Format(_T("%s:%d"),strtotal,mimutes);
		}
		else
		{
			strtotal.Format(_T("%s:0%d"),strtotal,mimutes);
		}
		//写入开始的秒
		seconds = (int)(ProcessSubtitle.GetAt(i)->movestart - 3600*time - 60*mimutes);
		strtotal.Format(_T("%s:%d"),strtotal,seconds);
		//写入开始的毫秒
		milliseconds = (ProcessSubtitle.GetAt(i)->movestart - 3600*time - 60*mimutes - seconds)*1000;
		strtotal.Format(_T("%s,%d --> "),strtotal,milliseconds);
		//写入结束的时
		time = (int)ProcessSubtitle.GetAt(i)->moveend/3600;
		if (time > 9)
		{
			strtotal.Format(_T("%s%d"),strtotal,time);
		}
		else
		{
			strtotal.Format(_T("%s0%d"),strtotal,time);
		}
		//写入结束的分
		mimutes = (int)((ProcessSubtitle.GetAt(i)->moveend - 3600*time)/60);
		if (mimutes > 9)
		{
			strtotal.Format(_T("%s:%d"),strtotal,mimutes);
		}
		else
		{
			strtotal.Format(_T("%s:0%d"),strtotal,mimutes);
		}
		//写入结束的秒
		seconds = (int)(ProcessSubtitle.GetAt(i)->moveend - 3600*time - 60*mimutes);
		strtotal.Format(_T("%s:%d"),strtotal,seconds);
		//写入结束的毫秒
		milliseconds = (ProcessSubtitle.GetAt(i)->moveend - 3600*time - 60*mimutes - seconds)*1000;
		strtotal.Format(_T("%s,%d"),strtotal,milliseconds);
		fifFile.WriteString(strtotal);
		fifFile.WriteString(_T("\n"));
		//写入字体设置信息
		fifFile.WriteString(m_strSetUp);
		fifFile.WriteString(_T("\n"));
		//写入字幕内容
		fifFile.WriteString(ProcessSubtitle.GetAt(i)->strSubtitle);
		fifFile.WriteString(_T("\n"));
		fifFile.WriteString(_T("\n"));
	}
	fifFile.Close();
	ProcessSubtitle.RemoveAll();

	return TRUE;
}

CATBoolean CATProcessNotes::GetSubtitles(CATUnicodeString strPath)
{
	CString strSrt = ConvertToCString(strPath);
	strSrt.Replace(_T(".avi"),_T(".srt"));
	if (!PathFileExists(strSrt))
	{
		return FALSE;
	}
	ProcessSubtitle.RemoveAll();
	CString strTemp;
	CStdioFile fifFile(strSrt,CFile::modeRead);
	for (int i=0;;i++)
	{
		PPRSubtitle* pSubtitle = new PPRSubtitle();
		fifFile.ReadString(pSubtitle->strNum);
		fifFile.ReadString(strTemp);
		if (pSubtitle->strNum == _T(""))
		{
			delete pSubtitle;
			break;
		}
		GetStartAndEndTime(strTemp,pSubtitle);
		fifFile.ReadString(strTemp);//跳过字幕设置的读取
		fifFile.ReadString(pSubtitle->strSubtitle);
		fifFile.ReadString(strTemp);
		ProcessSubtitle.Add(pSubtitle);
	}

	return TRUE;
}

CATBoolean CATProcessNotes::GetStartAndEndTime(CString strTemp,PPRSubtitle* pSubtitle)
{
	int time = 0;
	int mimutes = 0;
	int seconds = 0;
	int milliseconds = 0;
	CString strstart = strTemp.Left(strTemp.Find(_T(' ')));
	CString strend = strTemp.Right(strTemp.GetLength() - strTemp.ReverseFind(_T(' ')) - 1);
	//获取开始的时
	time = (_ttoi(strstart.Mid(0,1)))*10 + _ttoi(strstart.Mid(1,1));
	//获取开始的分
	mimutes = (_ttoi(strstart.Mid(3,1)))*10 + _ttoi(strstart.Mid(4,1));
	//获取开始的秒
	if (strstart.Mid(7,1) == _T(","))
	{
		seconds = _ttoi(strstart.Mid(6,1));
		//获取开始的毫秒
		milliseconds = _ttoi(strstart.Mid(8,strstart.GetLength()));
	}
	if (strstart.Mid(8,1) == _T(","))
	{
		seconds = (_ttoi(strstart.Mid(6,1)))*10 + _ttoi(strstart.Mid(7,1));
		//获取开始的毫秒
		milliseconds = _ttoi(strstart.Mid(8,strstart.GetLength()));
	}
	pSubtitle->movestart = time*3600 + mimutes*60 + seconds + milliseconds/1000;
	
	//获取结束的时
	time = (_ttoi(strend.Mid(0,1)))*10 + _ttoi(strend.Mid(1,1));
	//获取结束的分
	mimutes = (_ttoi(strend.Mid(3,1)))*10 + _ttoi(strend.Mid(4,1));
	//获取结束的秒
	if (strend.Mid(7,1) == _T(","))
	{
		seconds = _ttoi(strend.Mid(6,1));
		//获取结束的毫秒
		milliseconds = _ttoi(strend.Mid(8,strend.GetLength()));
	}
	if (strend.Mid(8,1) == _T(","))
	{
		seconds = (_ttoi(strend.Mid(6,1)))*10 + _ttoi(strend.Mid(7,1));
		//获取结束的毫秒
		milliseconds = _ttoi(strend.Mid(8,strend.GetLength()));
	}
	pSubtitle->moveend = time*3600 + mimutes*60 + seconds + milliseconds/1000;

	return TRUE;
}

CATBoolean CATProcessNotes::GetRefreshFlag(double start,double end,CString strContent)
{
	if (ProcessSubtitle.GetSize() == 0)
	{
		PPRSubtitle* pSubtitle = new PPRSubtitle();
		pSubtitle->movestart = start;
		pSubtitle->moveend = end;
		pSubtitle->strSubtitle = strContent;
		ProcessSubtitle.Add(pSubtitle);
		return TRUE;
	}
	for (int i=0; i< ProcessSubtitle.GetSize(); i++)
	{
		if (i == 0)
		{
			if ((start == ProcessSubtitle.GetAt(i)->movestart) && (end == ProcessSubtitle.GetAt(i)->moveend))
			{
				ProcessSubtitle.GetAt(i)->strSubtitle = strContent;
				break;
			}
			if (end < ProcessSubtitle.GetAt(i)->movestart)
			{
				PPRSubtitle* pSubtitle = new PPRSubtitle();
				pSubtitle->movestart = start;
				pSubtitle->moveend = end;
				pSubtitle->strSubtitle = strContent;
				ProcessSubtitle.InsertAt(i,pSubtitle);
				break;
			}
			if (start > ProcessSubtitle.GetAt(i)->moveend)
			{
				PPRSubtitle* pSubtitle = new PPRSubtitle();
				pSubtitle->movestart = start;
				pSubtitle->moveend = end;
				pSubtitle->strSubtitle = strContent;
				ProcessSubtitle.Add(pSubtitle);
				break;
			}
		}
		if ((i == (ProcessSubtitle.GetSize()-1))&&(i != 0))
		{
			if (start > ProcessSubtitle.GetAt(i)->moveend)
			{
				PPRSubtitle* pSubtitle = new PPRSubtitle();
				pSubtitle->movestart = start;
				pSubtitle->moveend = end;
				pSubtitle->strSubtitle = strContent;
				ProcessSubtitle.Add(pSubtitle);
				break;
			}
			if (end < ProcessSubtitle.GetAt(i)->movestart)
			{
				PPRSubtitle* pSubtitle = new PPRSubtitle();
				pSubtitle->movestart = start;
				pSubtitle->moveend = end;
				pSubtitle->strSubtitle = strContent;
				ProcessSubtitle.InsertAt(i,pSubtitle);
				break;
			}
		}
		if((i > 0)&&(i < (ProcessSubtitle.GetSize()-1)))
		{
			if ((start == ProcessSubtitle.GetAt(i)->movestart) && (end == ProcessSubtitle.GetAt(i)->moveend))
			{
				ProcessSubtitle.GetAt(i)->strSubtitle = strContent;
				break;
			}
			if ((start > ProcessSubtitle.GetAt(i-1)->moveend)&&(start < ProcessSubtitle.GetAt(i)->movestart)&&(end < ProcessSubtitle.GetAt(i)->movestart))
			{
				PPRSubtitle* pSubtitle = new PPRSubtitle();
				pSubtitle->movestart = start;
				pSubtitle->moveend = end;
				pSubtitle->strSubtitle = strContent;
				ProcessSubtitle.InsertAt(i,pSubtitle);
				break;
			}
		}
	}

	return FALSE;
}
