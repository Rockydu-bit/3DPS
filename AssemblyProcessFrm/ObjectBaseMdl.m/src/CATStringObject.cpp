// COPYRIGHT Dassault Systemes 2015
//===================================================================
//
// CATStringObject.cpp
// Header definition of CATStringObject
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//
//  Oct 2015  Creation: Code generated by the CAA wizard  WANGJIAPENG
//===================================================================
#include "CATStringObject.h"
#include "iostream.h"

using namespace std;

CATStringObject* CATStringObject::m_pStringObject = NULL;
CATImplementClass( CATStringObject,
                   Implementation, 
                   CATPPRObject,
                   CATNull );
 
//-----------------------------------------------------------------------------
// CATStringObject : constructor
//-----------------------------------------------------------------------------
CATStringObject::CATStringObject():
    CATPPRObject()
{
}

//-----------------------------------------------------------------------------
// CATStringObject : destructor
//-----------------------------------------------------------------------------
CATStringObject::~CATStringObject()
{
}
 
CATStringObject* CATStringObject::GetInstance()
{
	if (m_pStringObject == NULL)
	{
		m_pStringObject = new CATStringObject();
	}
	return m_pStringObject;
}

//-----------------------------------------------------------------------------
// CATStringObject : copy constructor
//-----------------------------------------------------------------------------
CATStringObject::CATStringObject(CATStringObject& original):
   CATPPRObject(original)
{
}
 
//-----------------------------------------------------------------------------
// CATStringObject : equal operator
//-----------------------------------------------------------------------------
CATStringObject& CATStringObject::operator=(CATStringObject& original)
{
   CATPPRObject::operator=(original);
   return *this;
}

CString CATStringObject::ConvertToCString(CATUnicodeString strTemp)
{
	CString str;
	wchar_t charTmp[100] = {0};
	strTemp.ConvertToWChar(charTmp);
	str.Format(_T("%s"),charTmp);

	return str;
}

CATUnicodeString CATStringObject::ConvertToCATString(CString strTemp)
{
	std::wstring wstr_tip(strTemp.GetBuffer());
	strTemp.ReleaseBuffer();
	CATUnicodeString uni_tip;
	uni_tip.BuildFromWChar(wstr_tip.c_str());

	return uni_tip;
}

char *CATStringObject::ConvertToChar(CString strTemp)
{
	char *pch = new char[strTemp.GetLength()+1];
	pch = (char *)strTemp.GetBuffer(strTemp.GetLength()+1);
	strTemp.ReleaseBuffer();

	return pch;
}

CATString CATStringObject::ConvertToMultiByte(CString strTemp)
{
	CATString string;
	int len = WideCharToMultiByte(CP_ACP,0,strTemp,strTemp.GetLength(),NULL,0,NULL,NULL);
	char *pch = new char[len+1];
	WideCharToMultiByte(CP_ACP,0,strTemp,strTemp.GetLength(),pch,len,NULL,NULL);
	string = pch;

	return string;
}

int CATStringObject::ConvertToInt(CATUnicodeString strTemp)
{
	CString str = ConvertToCString(strTemp);
	int i = _ttoi(str);

	return i;
}

char* CATStringObject::ConvertMultiByteToChar(CString strTemp)
{
	char *_pFileToOpen;
	const size_t strsize = (strTemp.GetLength() + 1)*2;//宽字符长度
	char *pstr = new char[strsize];//分配空间
	size_t sz = 0;
	wcstombs_s(&sz,pstr,strsize,strTemp,_TRUNCATE);
	const char *fileName = pstr;
	strTemp.ReleaseBuffer();
	_pFileToOpen = (char *)malloc((strlen(fileName)+1)*sizeof(char));
	memset(_pFileToOpen, 0, strlen(fileName)+1);
	strcpy(_pFileToOpen, fileName);

	return _pFileToOpen;
}

CATBoolean CATStringObject::CheckStringExist(CString strTemp,CArray<CString,CString>& strArray)
{
	if (strArray.IsEmpty())
	{
		return FALSE;
	}
	for (int i=0; i<strArray.GetSize(); i++)
	{
		if (strTemp == strArray.GetAt(i))
		{
			return TRUE;
		}
	}

	return FALSE;
}
