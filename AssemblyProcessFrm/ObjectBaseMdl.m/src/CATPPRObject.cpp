// COPYRIGHT Dassault Systemes 2015
//===================================================================
//
// CATPPRObject.cpp
// Header definition of CATPPRObject
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//
//  Oct 2015  Creation: Code generated by the CAA wizard  WANGJIAPENG
//===================================================================
#include "CATPPRObject.h"
 
CATImplementClass( CATPPRObject,
                   Implementation, 
                   CATBaseUnknown,
                   CATNull );
 
//-----------------------------------------------------------------------------
// CATPPRObject : constructor
//-----------------------------------------------------------------------------
CATPPRObject::CATPPRObject():
    CATBaseUnknown()
{
}

//-----------------------------------------------------------------------------
// CATPPRObject : destructor
//-----------------------------------------------------------------------------
CATPPRObject::~CATPPRObject()
{
}
 
//-----------------------------------------------------------------------------
// CATPPRObject : copy constructor
//-----------------------------------------------------------------------------
CATPPRObject::CATPPRObject(CATPPRObject& original):
   CATBaseUnknown(original)
{
}
 
//-----------------------------------------------------------------------------
// CATPPRObject : equal operator
//-----------------------------------------------------------------------------
CATPPRObject& CATPPRObject::operator=(CATPPRObject& original)
{
   CATBaseUnknown::operator=(original);
   return *this;
}

CString CATPPRObject::GetProgramPath()
{
	TCHAR filename[_MAX_PATH+_MAX_FNAME];
	::GetModuleFileName(NULL,filename,sizeof(filename));
	CString strSldexeLoation(filename);
	CString strDirectory(strSldexeLoation.Left(strSldexeLoation.ReverseFind(_T('\\'))));
	strDirectory.FreeExtra();
	return strDirectory;
}

CATBoolean CATPPRObject::ShowOrHideElement(CATIProduct_var spProduct,CATUnicodeString iShowOrHide)
{
	HRESULT rc;
	CATISpecObject_var spSpecObject = spProduct;
	CATIVisProperties *piProperties = NULL;
	rc = spSpecObject->QueryInterface(IID_CATIVisProperties,(void**)&piProperties);
	if (FAILED(rc))
	{
		return FALSE;
	}
	CATVisPropertiesValues MyProperty;
	if (iShowOrHide == "Show")
	{
		MyProperty.SetShowAttr(CATShowAttr);
	}
	else
	{
		MyProperty.SetShowAttr(CATNoShowAttr);
	}
	rc = piProperties->SetPropertiesAtt(MyProperty,CATVPShow,CATVPGlobalType,0,0);
	if (FAILED(rc))
	{
		return FALSE;
	}
	CATIModelEvents *piModelEventNewFeat = NULL;
	rc = spSpecObject->QueryInterface(IID_CATIModelEvents,(void**)&piModelEventNewFeat);
	if (SUCCEEDED(rc))
	{
		CATModifyVisProperties notif(spSpecObject,CATPathElement(spSpecObject),CATVPGlobalType,CATVPShow,MyProperty);
		piModelEventNewFeat->Dispatch(notif);
		piModelEventNewFeat->Release();
		piModelEventNewFeat = NULL;
	}
	piProperties->Release();
	piProperties = NULL;

	return TRUE;
}
