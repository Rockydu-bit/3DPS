// COPYRIGHT Dassault Systemes 2015
//===================================================================
//
// CATPPRDocument.cpp
// Header definition of CATPPRDocument
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//
//  Oct 2015  Creation: Code generated by the CAA wizard  WANGJIAPENG
//===================================================================
#include "CATPPRDocument.h"
#include "shlwapi.h"

#pragma comment(lib,"Shlwapi.lib")
 
CATImplementClass( CATPPRDocument,
                   Implementation, 
                   CATStringObject,
                   CATNull );
 
//-----------------------------------------------------------------------------
// CATPPRDocument : constructor
//-----------------------------------------------------------------------------
CATPPRDocument::CATPPRDocument():
    CATStringObject()
{
}

//-----------------------------------------------------------------------------
// CATPPRDocument : destructor
//-----------------------------------------------------------------------------
CATPPRDocument::~CATPPRDocument()
{
}
 
//-----------------------------------------------------------------------------
// CATPPRDocument : copy constructor
//-----------------------------------------------------------------------------
CATPPRDocument::CATPPRDocument(CATPPRDocument& original):
   CATStringObject(original)
{
}
 
//-----------------------------------------------------------------------------
// CATPPRDocument : equal operator
//-----------------------------------------------------------------------------
CATPPRDocument& CATPPRDocument::operator=(CATPPRDocument& original)
{
   CATStringObject::operator=(original);
   return *this;
}

CATFrmEditor* CATPPRDocument::GetCurrentFrmEditor()
{
	HRESULT rc=S_OK;
	CATFrmEditor* pEditor = CATFrmEditor::GetCurrentEditor();

	return pEditor;
}

CATDocument* CATPPRDocument::GetCurrentDocument()
{
	HRESULT rc=S_OK;
	CATFrmEditor* pEditor = CATFrmEditor::GetCurrentEditor();
	CATPathElement pPath = pEditor->GetUIActiveObject();
	CATBaseUnknown* pCurElement = pPath.CurrentElement();
	if (pCurElement==NULL)return NULL;
	CATILinkableObject* pLinkableObject = NULL;
	rc = pCurElement->QueryInterface(IID_CATILinkableObject,(void**)&pLinkableObject);
	if ((FAILED(rc))||(pLinkableObject == NULL))return NULL;
	CATDocument * pDocument = NULL;
	pDocument = pLinkableObject->GetDocument();
	if (pLinkableObject != NULL)
	{
		pLinkableObject->Release();
		pLinkableObject = NULL;
	}

	return pDocument;
}

CATIProduct_var CATPPRDocument::GetProductOnRoot(CATDocument *ipPartDoc)
{
	HRESULT rc=S_OK;
	CATIProduct_var spProd=NULL_var;
	CATIDocRoots* piDocRootsOnDoc = NULL;
	rc = ipPartDoc->QueryInterface(IID_CATIDocRoots,(void**) &piDocRootsOnDoc);
	if (FAILED(rc) || NULL == piDocRootsOnDoc)
	{
		return spProd;
	}
	CATListValCATBaseUnknown_var* pRootProducts = piDocRootsOnDoc->GiveDocRoots();
	if (piDocRootsOnDoc!=NULL)
	{
		piDocRootsOnDoc->Release();piDocRootsOnDoc = NULL;
	}
	if ( NULL == pRootProducts || pRootProducts->Size() <= 0) 
	{
		return spProd;
	}
	CATIProduct_var spRootProduct = NULL_var;
	spRootProduct = (*pRootProducts)[1];
	delete pRootProducts;pRootProducts = NULL;
	if( spRootProduct == NULL_var ) return NULL_var;
	spProd = spRootProduct;

	return spProd;
}

CString CATPPRDocument::GetProductPath(CATIProduct_var spProduct)
{
	HRESULT rc = S_FALSE;
	CString strPath;
	CATILinkableObject *piLinkable = NULL;
	rc = spProduct->QueryInterface(IID_CATILinkableObject,(void**)&piLinkable);
	if (SUCCEEDED(rc))
	{
		CATDocument *pDoc = piLinkable->GetDocument();
		if (pDoc != NULL)
		{
			CATUnicodeString strPartPath = pDoc->StorageName();
			wchar_t charTmp[100] = {0};
			strPartPath.ConvertToWChar(charTmp);
			strPath.Format(_T("%s"),charTmp);
		}
	}
	CString strName = _T("");
	int start = 0;
	int end = strPath.ReverseFind(_T('\\'))+1;
	strName = strPath.Mid(start,end);

	return strName;
}

CATBoolean CATPPRDocument::GetProductPointer(CATIProduct_var spProduct,CArray<CATIProduct_var,CATIProduct_var>& ProductPointerArray)
{
	if (spProduct == NULL_var) return FALSE;
	int NumOfChildren = spProduct->GetChildrenCount();
	if (NumOfChildren == 0)
	{
		ProductPointerArray.Add(spProduct);
	}
	else
	{
		CATListValCATBaseUnknown_var *ListChild = spProduct->GetChildren();
		if (ListChild == NULL) return FALSE;
		int numOfChildren = ListChild->Size();
		CATIProduct_var spChild = NULL_var;
		for (int i=1; i<=numOfChildren; i++)
		{
			spChild = (*ListChild)[i];
			GetProductPointer(spChild,ProductPointerArray);
		}
	}

	return TRUE;
}

CATUnicodeString CATPPRDocument::GetIconAddress(CATUnicodeString strIconName)
{
	CString strPath = GetProgramPath();
	strPath = strPath + _T("\\") + strIconName;
	if (!PathFileExists(strPath))
	{
		return "";
	}
	CATUnicodeString strIconPath = ConvertToCATString(strPath);

	return strIconPath;
}
