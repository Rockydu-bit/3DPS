// COPYRIGHT Dassault Systemes 2015
//===================================================================
//
// CATPPRProcess.cpp
// Header definition of CATPPRProcess
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//
//  Oct 2015  Creation: Code generated by the CAA wizard  WANGJIAPENG
//===================================================================
#include "CATPPRProcess.h"
#include "iostream.h"
#include "CATProcessFile.h"
 
CATPPRProcess* CATPPRProcess::m_pPPRProcess = NULL;

CATImplementClass( CATPPRProcess,
                   Implementation, 
                   CATPPRDocument,
                   CATNull );
 
//-----------------------------------------------------------------------------
// CATPPRProcess : constructor
//-----------------------------------------------------------------------------
CATPPRProcess::CATPPRProcess():
    CATPPRDocument()
{
	RootNode = new ProcessNode();
	total = 0;
	movetime = 0;
	pertmovetime = 0;
	timemax = 0;
	flag = false;
}

//-----------------------------------------------------------------------------
// CATPPRProcess : destructor
//-----------------------------------------------------------------------------
CATPPRProcess::~CATPPRProcess()
{
	if (RootNode)
	{
		delete RootNode;
		RootNode = NULL;
	}
}
 
CATPPRProcess* CATPPRProcess::GetInstance()
{
	if (m_pPPRProcess == NULL)
	{
		m_pPPRProcess = new CATPPRProcess();
	}
	return m_pPPRProcess;
}

//-----------------------------------------------------------------------------
// CATPPRProcess : copy constructor
//-----------------------------------------------------------------------------
CATPPRProcess::CATPPRProcess(CATPPRProcess& original):
   CATPPRDocument(original)
{
}
 
//-----------------------------------------------------------------------------
// CATPPRProcess : equal operator
//-----------------------------------------------------------------------------
CATPPRProcess& CATPPRProcess::operator=(CATPPRProcess& original)
{
   CATPPRDocument::operator=(original);
   return *this;
}

CATISPPActivityRoot_var CATPPRProcess::GetPPRRootPointer(CATDocument *pProcessDoc)
{
	if (pProcessDoc == NULL)
	{
		return NULL_var;
	}
	HRESULT rc = E_FAIL;
	CATInit *piInitOnDoc = NULL;
	rc = pProcessDoc -> QueryInterface(IID_CATInit,(void**)&piInitOnDoc);
	if (FAILED(rc)) return NULL_var;
	CATISPPProcessContainer *piProcessCont = (CATISPPProcessContainer*)piInitOnDoc -> GetRootContainer("CATISPPProcessContainer");
	if ( NULL == piProcessCont) return NULL_var;
	piInitOnDoc -> Release();
	piInitOnDoc = NULL;
	CATLISTV(CATBaseUnknown_var) *pProcessList = piProcessCont->GetAllProcess();
	piProcessCont -> Release();
	piProcessCont = NULL;
	if ((NULL == pProcessList) || ((*pProcessList).Size() < 1))
	{ 
		if ((*pProcessList).Size() > 0) delete pProcessList;
		return NULL_var;
	}
	CATISPPActivityRoot_var spActivityRoot = (*pProcessList)[1];
	delete pProcessList;
	pProcessDoc->Release();
	pProcessDoc = NULL;
	GetPPRRootNodeInfo(spActivityRoot,RootNode);

	return spActivityRoot;
}

CATBoolean CATPPRProcess::GetPertMoveTime(CATISPPAbstractActivity_var spActivityOnActivity,int layer,ProcessNode *pNode)
{
	HRESULT rc = E_FAIL;
	CString strNode;
	CATUnicodeString strIcon;
	CATISPPActivity_var piActivity = spActivityOnActivity;
	CATISPPAbstractActivity_var spActivityOnChild = NULL_var;
	CATISPPFlowMgt_var spFlowObject = piActivity;
	if ((flag == false)&&(spFlowObject->PreviousActivitiesForControl().Size() > 1))
	{
		//取最大值
		double time = movetime - pertmovetime;
		if (timemax < time)
		{
			timemax = time;
		}
	}
	if ((flag == true)&&(spFlowObject->PreviousActivitiesForControl().Size() > 1))
	{
		flag = false;
		double time = movetime - pertmovetime;
		if (timemax < time)
		{
			timemax = time;
		}
		MoveActivity* pMove = new MoveActivity();
		pMove->MoveName = ConvertToCString(spActivityOnActivity->GetLabel());
		pMove->MoveIcon = ConvertToCString(GetPPRNodeIcon(spActivityOnActivity));
		GetRelatedItems(spActivityOnActivity,pMove);
		pNode->MoveArray.Add(pMove);
		movetime = pertmovetime + timemax;
		pMove->beginTime = movetime + piActivity->GetCalculatedBeginTime();
		pMove->endTime = movetime + piActivity->GetSpecifiedCycleTime();
		if (piActivity->GetSpecifiedCycleTime() == 0)
		{
			pMove->beginTime = movetime;
			pMove->endTime = movetime;
		}
		movetime = movetime + piActivity->GetSpecifiedCycleTime();
		CATListValCATBaseUnknown_var ListActivity = spFlowObject->NextActivitiesForControl();
		int num = ListActivity.Size();
		for (int i=1; i<=num; i++)
		{
			spActivityOnChild = ListActivity[i];
			CATUnicodeString strLabel = spActivityOnChild->GetLabel();
			if (ConvertToCString(strLabel).Find(_T("停止")) != -1)
			{
				break;
			}
			if ((num > 1)&&(i == 1))
			{
				timemax = 0;
				pertmovetime = movetime;
			}
			if ((num > 1)&&(i == num))
			{
				flag = true;
				GetPertMoveTime(spActivityOnChild,i,pNode);
			}
			else
			{
				GetPertMoveTime(spActivityOnChild,i,pNode);
			}
		}
	}
	else if(spFlowObject->PreviousActivitiesForControl().Size() <= 1)
	{
		MoveActivity* pMove = new MoveActivity();
		pMove->MoveName = ConvertToCString(spActivityOnActivity->GetLabel());
		pMove->MoveIcon = ConvertToCString(GetPPRNodeIcon(spActivityOnActivity));
		GetRelatedItems(spActivityOnActivity,pMove);
		pNode->MoveArray.Add(pMove);
		if (layer > 1)
		{
			movetime = pertmovetime;
		}
		pMove->beginTime = movetime + piActivity->GetCalculatedBeginTime();
		pMove->endTime = movetime + piActivity->GetSpecifiedCycleTime();
		if (piActivity->GetSpecifiedCycleTime() == 0)
		{
			pMove->beginTime = movetime;
			pMove->endTime = movetime;
		}
		movetime = movetime + piActivity->GetSpecifiedCycleTime();
		CATListValCATBaseUnknown_var ListActivity = spFlowObject->NextActivitiesForControl();
		int num = ListActivity.Size();
		for (int i=1; i<=num; i++)
		{
			spActivityOnChild = ListActivity[i];
			CATUnicodeString strLabel = spActivityOnChild->GetLabel();
			if (ConvertToCString(strLabel).Find(_T("停止")) != -1)
			{
				break;
			}
			if ((num > 1)&&(i == 1))
			{
				timemax = 0;
				pertmovetime = movetime;
			}
			if ((num > 1)&&(i == num))
			{
				flag = true;
				GetPertMoveTime(spActivityOnChild,i,pNode);
			}
			else
			{
				GetPertMoveTime(spActivityOnChild,i,pNode);
			}
		}
	}

	return TRUE;
}

CATBoolean CATPPRProcess::GetPPRRootNodeInfo(CATISPPActivityRoot_var spActivityRoot,ProcessNode *RootNode)
{
	ProcessNodeArray.RemoveAll();
	FirstLayerActivity.RemoveAll();
	AbstractActivity.RemoveAll();
	if (spActivityRoot == NULL_var)return FALSE;
	HRESULT rc = E_FAIL;
	CString strNode;
	CATUnicodeString strIcon;
	CATISPPChildManagement *piChildMgtOnActivity = NULL;
	rc = spActivityRoot -> QueryInterface(IID_CATISPPChildManagement,(void**)&piChildMgtOnActivity);
	if (FAILED(rc)) return FALSE;
	RootNode->piChildMgtOnActivity = piChildMgtOnActivity;
	CATListValCATBaseUnknown_var *pListChild = piChildMgtOnActivity->GetChild("PhysicalActivity");
	piChildMgtOnActivity->Release();
	int num = pListChild->Size();
	if (num == 0)
	{
		RootNode = NULL;
		return FALSE;
	}
	RootNode->layer = 0;
	RootNode->ProcessNum = _T("0");
	RootNode->piActivityOnActivity = NULL;
	CATISpecObject_var spObject = spActivityRoot;
	if (spObject != NULL_var)
	{
		CATUnicodeString strName = spObject->GetDisplayName();
		RootNode->ProcessName = ConvertToCString(strName);
	}
	for (int i=1; i<=num; i++)
	{
		CATBaseUnknown_var spAssemblyActivity = (*pListChild)[i];
		CATISPPAbstractActivity_var spActivityOnActivity = spAssemblyActivity;
		strNode = ConvertToCString(spActivityOnActivity->GetLabel());
		strIcon = GetPPRNodeIcon(spActivityOnActivity);
		if ((strIcon == "I_DNBTrack") || (strIcon == "I_DNBPhoto") || (strIcon == "I_DNBSwapHideShow") 
			||(strIcon == "I_DatumFeature") ||(strIcon == "I_DNBSimDelay"))
		{
			MoveActivity* pMove = new MoveActivity();
			pMove->MoveName = strNode;
			pMove->MoveIcon = ConvertToCString(strIcon);
			GetRootRelatedItems(spActivityOnActivity,pMove);
			RootNode->MoveArray.Add(pMove);
		}
		FirstLayerActivity.Add(spAssemblyActivity);
	}
	RootNode->beginTime = 0;
	RootNode->endTime = 0;
	for (int i=0; i<RootNode->MoveArray.GetSize(); i++)
	{
		RootNode->endTime = RootNode->endTime + RootNode->MoveArray.GetAt(i)->endTime;
	}
	ProcessNodeArray.Add(RootNode);

	return TRUE;
}

CATISPPAbstractActivity_var CATPPRProcess::GetPPRStartPointer(CATISPPActivityRoot_var spActivityRoot)
{
	if (spActivityRoot == NULL_var)return NULL_var;
	HRESULT rc = E_FAIL;
	CATISPPAbstractActivity_var spActivityOnActivity = NULL_var;
	CString strNode;
	CATISPPChildManagement *piChildMgtOnActivity = NULL;
	rc = spActivityRoot -> QueryInterface(IID_CATISPPChildManagement,(void**)&piChildMgtOnActivity);
	if (FAILED(rc)) return NULL_var;
	CATListValCATBaseUnknown_var *pListChild = piChildMgtOnActivity->GetChild("PhysicalActivity");
	piChildMgtOnActivity->Release();
	int num = pListChild->Size();
	for (int i=1; i<=num; i++)
	{
		CATBaseUnknown_var spAssemblyActivity = (*pListChild)[i];
		CATISPPAbstractActivity_var spActivityOnChild = spAssemblyActivity;
		strNode = ConvertToCString(spActivityOnChild->GetLabel());
		spActivityOnActivity = spActivityOnChild;
		break;
	}

	return spActivityOnActivity;
}

CATBoolean CATPPRProcess::GetPPRNodeInfo(CArray<CATBaseUnknown_var,CATBaseUnknown_var>& ActivityArray,int layer)
{
	if (ActivityArray.GetSize() == 0)
	{
		return FALSE;
	}
	CArray<CATBaseUnknown_var,CATBaseUnknown_var> BaseUnknownArray;
	BaseUnknownArray.RemoveAll();
	HRESULT rc = E_FAIL;
	CString strNode;
	CATUnicodeString strIcon;
	layer++;
	for (int i=0; i<ActivityArray.GetSize(); i++)
	{
		total++;
		CATISPPAbstractActivity_var spActivityOnActivity = ActivityArray.GetAt(i);
		strIcon = GetPPRNodeIcon(spActivityOnActivity);
		CATUnicodeString strType = spActivityOnActivity->GetType();
		if ((strIcon == "I_DNBTrack") || (strIcon == "I_DNBPhoto") || (strIcon == "I_DNBSwapHideShow") 
			||(strIcon == "I_DatumFeature") ||(strIcon == "I_DNBSimDelay")||(strType == "CableSimulation"))
		{
			MoveActivity* pMove = new MoveActivity();
			pMove->MoveIcon = ConvertToCString(strIcon);
			GetRelatedItems(spActivityOnActivity,pMove);
			continue;
		}
		ProcessNode* pNode = new ProcessNode();
		pNode->layer = layer;
		pNode->ProcessNum.Format(_T("%d"),total);
		pNode->ProcessName = ConvertToCString(spActivityOnActivity->GetLabel());
		pNode->beginTime = 0;
		pNode->endTime = 0;
		pNode->spAssemblyActivity = ActivityArray.GetAt(i);
		pNode->piActivityOnActivity = spActivityOnActivity;
		//获取下一层
		CATISPPChildManagement *piChildOnActivity = NULL;
		rc = spActivityOnActivity -> QueryInterface(IID_CATISPPChildManagement,(void**)&piChildOnActivity);
		if (FAILED(rc)) continue;
		CATListValCATBaseUnknown_var *pListChild = piChildOnActivity->GetChild("PhysicalActivity");
		piChildOnActivity->Release();
		int num = pListChild->Size();
		for (int j=1; j<=num; j++)
		{
			CATBaseUnknown_var spAssemblyActivity = (*pListChild)[j];
			CATISPPAbstractActivity_var spActivity = spAssemblyActivity;
			strIcon = GetPPRNodeIcon(spActivity);
			CATUnicodeString strType = spActivity->GetType();
			if ((strIcon == "I_DNBTrack") || (strIcon == "I_DNBPhoto") || (strIcon == "I_DNBSwapHideShow") 
				||(strIcon == "I_DatumFeature") ||(strIcon == "I_DNBSimDelay")||(strType == "CableSimulation"))
			{
				GetPertMoveTime(spActivity,1,pNode);
				break;
			}
			else
			{
				BaseUnknownArray.Add(spAssemblyActivity);
			}
		}
		if (pNode->MoveArray.GetSize() == 0)
		{
			pNode->beginTime = movetime;
			pNode->endTime = movetime;
		}
		if (pNode->MoveArray.GetSize() != 0)
		{
			pNode->beginTime = pNode->MoveArray.GetAt(0)->beginTime;
			pNode->endTime = movetime;
		}
		pNode->piChildMgtOnActivity = piChildOnActivity;
		ProcessNodeArray.Add(pNode);
		if (BaseUnknownArray.GetSize() != 0)
		{
			GetPPRNodeInfo(BaseUnknownArray,layer);
			BaseUnknownArray.RemoveAll();
		}
	}
	CATProcessFile *pProcessFile = new CATProcessFile();
	pProcessFile->SaveBOM(ProcessNodeArray);
	delete pProcessFile;
	pProcessFile = NULL;

	return TRUE;
}

CATBoolean CATPPRProcess::GetPPRMoveActivity(CArray<CATBaseUnknown_var,CATBaseUnknown_var>& ActivityArray)
{
	if (ActivityArray.GetSize() == 0)
	{
		return FALSE;
	}
	CArray<CATBaseUnknown_var,CATBaseUnknown_var> BaseUnknownArray;
	BaseUnknownArray.RemoveAll();
	HRESULT rc = E_FAIL;
	CString strNode;
	CATUnicodeString strIcon;
	for (int i=0; i<ActivityArray.GetSize(); i++)
	{
		CATISPPAbstractActivity_var spActivityOnActivity = ActivityArray.GetAt(i);
		strIcon = GetPPRNodeIcon(spActivityOnActivity);
		if (strIcon == "I_DNBTrack")
		{
			AbstractActivity.Add(spActivityOnActivity);
		}
		//获取下一层
		CATISPPChildManagement *piChildOnActivity = NULL;
		rc = spActivityOnActivity -> QueryInterface(IID_CATISPPChildManagement,(void**)&piChildOnActivity);
		if (FAILED(rc)) continue;
		CATListValCATBaseUnknown_var *pListChild = piChildOnActivity->GetChild("PhysicalActivity");
		piChildOnActivity->Release();
		int num = pListChild->Size();
		for (int j=1; j<=num; j++)
		{
			CATBaseUnknown_var spAssemblyActivity = (*pListChild)[j];
			CATISPPAbstractActivity_var spActivity = spAssemblyActivity;
			strIcon = GetPPRNodeIcon(spActivity);
			if (strIcon == "I_DNBTrack")
			{
				AbstractActivity.Add(spActivity);
			}
			else
			{
				BaseUnknownArray.Add(spAssemblyActivity);
			}
		}
		if (BaseUnknownArray.GetSize() != 0)
		{
			GetPPRMoveActivity(BaseUnknownArray);
			BaseUnknownArray.RemoveAll();
		}
	}

	return TRUE;
}

CATBoolean CATPPRProcess::GetRootRelatedItems(CATISPPAbstractActivity *piActivityOnActivity,MoveActivity* pMove)
{
	HRESULT rc = E_FAIL;
	CATISPPActivity *piActivity = NULL;
	pMove->ProcessItemArray.RemoveAll();
	pMove->ProductArray.RemoveAll();
	CATISPPItemMgt *piItemMgt = NULL;
	rc = piActivityOnActivity->QueryInterface(IID_CATISPPItemMgt,(void**)&piItemMgt);
	if (FAILED(rc))return FALSE;
	CATListValCATBaseUnknown_var *ListResources = piItemMgt->GetItems();
	int num = ListResources->Size();
	CATIProduct_var spResource = NULL_var;
	CATUnicodeString resourceName("");
	CString strresource("");
	for (int i=1; i<=num; i++)
	{
		spResource = (*ListResources)[1];
		spResource->GetPrdInstanceName(resourceName);
		strresource = ConvertToCString(resourceName);
		pMove->ProcessItemArray.Add(strresource);
		pMove->ProductArray.Add(spResource);
	}
	rc = piActivityOnActivity->QueryInterface(IID_CATISPPActivity,(void**)&piActivity);
	if (FAILED(rc))return FALSE;
	pMove->beginTime = 0;
	pMove->endTime = piActivity->GetSpecifiedCycleTime();
	pMove->piActivityOnActivity = piActivityOnActivity;

	return TRUE;
}

CATBoolean CATPPRProcess::GetRelatedItems(CATISPPAbstractActivity *piActivityOnActivity,MoveActivity* pMove)
{
	HRESULT rc = E_FAIL;
	CATISPPActivity *piActivity = NULL;
	pMove->ProcessItemArray.RemoveAll();
	pMove->ProductArray.RemoveAll();
	CATISPPItemMgt *piItemMgt = NULL;
	rc = piActivityOnActivity->QueryInterface(IID_CATISPPItemMgt,(void**)&piItemMgt);
	if (FAILED(rc))return FALSE;
	//获取关联的Product
	CATListValCATBaseUnknown_var *ListResources = piItemMgt->GetItems();
	int num = ListResources->Size();
	CATIProduct_var spResource = NULL_var;
	CATUnicodeString resourceName("");
	CString strresource("");
	for (int i=1; i<=num; i++)
	{
		spResource = (*ListResources)[1];
		spResource->GetPrdInstanceName(resourceName);
		strresource = ConvertToCString(resourceName);
		pMove->ProcessItemArray.Add(strresource);
		pMove->ProductArray.Add(spResource);
	}
	//获取关联的Resource
	CATISPPResourceManagement *piAssemblyOnResource = NULL;
	rc = piActivityOnActivity->QueryInterface(IID_CATISPPResourceManagement,(void**)&piAssemblyOnResource);
	if (FAILED(rc))return FALSE;
	ListResources = piAssemblyOnResource->GetResources();
	num = ListResources->Size();
	for (int i=1; i<=num; i++)
	{
		spResource = (*ListResources)[1];
		spResource->GetPrdInstanceName(resourceName);
		strresource = ConvertToCString(resourceName);
		pMove->ProcessItemArray.Add(strresource);
		pMove->ProductArray.Add(spResource);
	}

	rc = piActivityOnActivity->QueryInterface(IID_CATISPPActivity,(void**)&piActivity);
	if (FAILED(rc))return FALSE;
	pMove->piActivityOnActivity = piActivityOnActivity;
	pMove->beginTime = 0;
	pMove->endTime = 0;
	//movetime = movetime + piActivity->GetSpecifiedCycleTime();

	return TRUE;
}

CATBoolean CATPPRProcess::GetPPRNodeType(CATISPPAbstractActivity *piActivityOnActivity)
{
	HRESULT rc = E_FAIL;
	CATISPPActivityType *pActivityType = NULL;
	rc = piActivityOnActivity->GetActivityType(&pActivityType);
	if (SUCCEEDED(rc))
	{
		CATUnicodeString strType = pActivityType->GetType();
		cout<<strType<<endl;
	}

	return TRUE;
}

CATUnicodeString CATPPRProcess::GetPPRNodeIcon(CATISPPAbstractActivity *piActivityOnActivity)
{
	if (piActivityOnActivity == NULL)
	{
		return "";
	}
	CATUnicodeString strIconName = "";
	strIconName = piActivityOnActivity->GetIcon();

	return strIconName;
}

HRESULT CATPPRProcess::InsertActivity(CATISPPActivity_var& spObjectActivity,CATISPPActivity_var& spInsertActivity,ActivityInsertType InsertType)
{
	CATISPPFlowMgt_var spFlowObject, spFlowOld, spFlowInsert,spFlowStart, spFlowStop;
	spFlowObject = spObjectActivity;
	spFlowInsert = spInsertActivity;

	CATListValCATBaseUnknown_var  ListActivity;
	if (InsertType == InsertAfter)
	{
		CATISPPActivity_var spMotherActivity = spObjectActivity->GetMother();
		CATISPPChildManagement_var spChildManagement(spMotherActivity);
		spFlowStart = (*(spChildManagement->GetChild("Start")))[1];
		spFlowStop = (*(spChildManagement->GetChild("Stop")))[1];

		ListActivity = spFlowObject->NextActivitiesForControl();
		if (ListActivity.Size() > 0)
		{
			for (int i = 1;i <= ListActivity.Size();i++)
			{
				spFlowOld = ListActivity[i];

				spFlowObject->AddControlFlow(spFlowInsert);
				spFlowInsert->AddControlFlow(spFlowOld);
				spFlowObject->RemoveControlFlow(spFlowOld);
			}
		}
		else 
		{
			spFlowObject->AddControlFlow(spFlowInsert);
			spFlowInsert->AddControlFlow(spFlowStop);
		}
	}
	else if (InsertType == InsertBefore)
	{
		CATISPPActivity_var spMotherActivity = spObjectActivity->GetMother();
		CATISPPChildManagement_var spChildManagement(spMotherActivity);
		spFlowStart = (*(spChildManagement->GetChild("Start")))[1];
		spFlowStop = (*(spChildManagement->GetChild("Stop")))[1];

		ListActivity = spFlowObject->PreviousActivitiesForControl();
		if (ListActivity.Size() > 0)
		{
			for (int i = 1;i <= ListActivity.Size();i++)
			{
				spFlowOld = ListActivity[i];

				spFlowOld->AddControlFlow(spFlowInsert);
				spFlowInsert->AddControlFlow(spFlowObject);
				spFlowOld->RemoveControlFlow(spFlowObject);
			}
		}
		else 
		{
			spFlowStart->AddControlFlow(spFlowInsert);
			spFlowInsert->AddControlFlow(spFlowObject);
		}
	}
	else if (InsertType == InsertAsChild)
	{
		CATISPPChildManagement_var spChildManagement(spObjectActivity);
		spFlowStart = (*(spChildManagement->GetChild("Start")))[1];
		spFlowStop = (*(spChildManagement->GetChild("Stop")))[1];

		ListActivity = spFlowStop->PreviousActivitiesForControl();
		if (ListActivity.Size() > 0)
		{
			for (int i = 1;i <= ListActivity.Size();i++)
			{
				spFlowOld = ListActivity[i];
				spFlowOld->AddControlFlow(spFlowInsert);
				spFlowInsert->AddControlFlow(spFlowStop);
				spFlowOld->RemoveControlFlow(spFlowStop);
			}
		}
		else 
		{
			spFlowStart->AddControlFlow(spFlowInsert);
			spFlowInsert->AddControlFlow(spFlowStop);
		}
	}
	else return S_FALSE;

	return S_OK;

}

int CATPPRProcess::GetLayerCount(CArray<ProcessNode*,ProcessNode*>& ProcessNodeArray)
{
	if (ProcessNodeArray.GetSize() == 0)
	{
		return 0;
	}
	int layermax = 0;
	for (int i=0; i<ProcessNodeArray.GetSize(); i++)
	{
		if (layermax < ProcessNodeArray.GetAt(i)->layer)
		{
			layermax = ProcessNodeArray.GetAt(i)->layer;
		}
	}

	return layermax;
}

CATBoolean CATPPRProcess::ShowOrHideActivity()
{
	HRESULT rc = E_FAIL;
	if (AbstractActivity.GetSize() == 0)
	{
		return FALSE;
	}
	for (int i=0; i<AbstractActivity.GetSize(); i++)
	{
		DNBIAsyMotionActivity* pAsyMotionActivity = NULL;
		rc = AbstractActivity.GetAt(i)->QueryInterface(IID_DNBIAsyMotionActivity,(void**) &pAsyMotionActivity);
		if (SUCCEEDED(rc))
		{
			CATITrack* oTrack = NULL;
			pAsyMotionActivity->GetTrack (oTrack);
			CATIVisProperties_var spPropertiesOnShow = oTrack;
			CATVisPropertiesValues  PropertyOnShow;
			PropertyOnShow.SetShowAttr(CATNoShowAttr);
			spPropertiesOnShow->SetPropertiesAtt(PropertyOnShow,CATVPShow);

			CATIModelEvents *pME = NULL;
			HRESULT rc = oTrack->QueryInterface(IID_CATIModelEvents,(void **) &pME);
			if (SUCCEEDED(rc))
			{
				CATModify notif(oTrack);
				pME->Dispatch(notif);

				pME->Release();
				pME = NULL ;
			}
		}
	}

	return TRUE;
}
