// COPYRIGHT Dassault Systemes 2015
//===================================================================
//
// CATPPRProcess.h
// Header definition of CATPPRProcess
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//
//  Oct 2015  Creation: Code generated by the CAA wizard  WANGJIAPENG
//===================================================================
#ifndef CATPPRProcess_H
#define CATPPRProcess_H

#include "PPRManagerMdl.h"
#include "CATPPRDocument.h"
#include "CATDocument.h"
#include "CATISPPProcessContainer.h"
#include "CATISPPActivityRoot.h"
#include "CATISPPChildManagement.h"
#include "CATISPPAbstractActivity.h"
#include "CATISPPActivity.h"
#include "CATISPPFlowMgt.h"
#include "CATISPPItemMgt.h"
#include "CATISPPItem.h"
#include "CATISPPActivityType.h"
#include "CATISPPResourceManagement.h"
#include "CATInit.h"
#include "CATIProduct.h"
#include "CATISpecObject.h"
#include "DNBIAsyMotionActivity.h"
#include "CATITrack.h"

enum ActivityInsertType
{
	InsertAfter,
	InsertBefore,
	InsertAsChild,
};

typedef struct _structMoveActivity
{
	double beginTime;//开始时间
	double endTime;//结束时间
	CString MoveName;//Move的名称
	CString MoveIcon;//Move的图标
	CATISPPAbstractActivity *piActivityOnActivity;//Move节点的指针
	CArray<CString,CString> ProcessItemArray;//关联的零部件
	CArray<CATIProduct*,CATIProduct*> ProductArray;//关联零部件的指针
}MoveActivity;

typedef struct _structProcessNode
{
	int layer;//记录层数
	CString ProcessNum;//编号，总的节点编号
	CString ProcessStep;//编号，相对编号
	CString ProcessName;//名称
	double beginTime;//开始时间
	double endTime;//结束时间(总时间)
	CATISPPChildManagement *piChildMgtOnActivity;//节点的总指针
	CATISPPAbstractActivity *piActivityOnActivity;//节点的指针
	CATBaseUnknown_var spAssemblyActivity;//创建工艺节点时的指针
	CArray<MoveActivity*,MoveActivity*> MoveArray;//可能存在多个Move
}ProcessNode;

class ExportedByPPRManagerMdl CATPPRProcess: public CATPPRDocument
{
  CATDeclareClass;

  public:

  // Standard constructors and destructors
  // -------------------------------------
     CATPPRProcess ();
     virtual ~CATPPRProcess ();

  // Copy constructor and equal operator
  // -----------------------------------
  CATPPRProcess (CATPPRProcess &);
  CATPPRProcess& operator=(CATPPRProcess&);

public:
	static CATPPRProcess* GetInstance();
public:
	static CATPPRProcess* m_pPPRProcess;


  int total;//记录工序总数
  CString strNum;//记录工序编号
  ProcessNode *RootNode;//根节点的信息
  double movetime;//计算move的时间
  double pertmovetime;//从pert图计算move
  double timemax;//所有线路中时间最长的线路
  bool flag;//是否为最后一条线路

  //Move Activity的指针
  CArray<CATISPPAbstractActivity_var,CATISPPAbstractActivity_var> AbstractActivity;
  //Process根节点下第一层节点指针
  CArray<CATBaseUnknown_var,CATBaseUnknown_var> FirstLayerActivity;
  //Process所有节点信息
  CArray<ProcessNode*,ProcessNode*> ProcessNodeArray;
  //获取根节点指针
  CATISPPActivityRoot_var GetPPRRootPointer(CATDocument *pProcessDoc);
  //获取根节点信息
  CATBoolean GetPPRRootNodeInfo(CATISPPActivityRoot_var spActivityRoot,ProcessNode *RootNode);
  //获取Process节点,按照总序号
  CATBoolean GetPPRNodeInfo(CArray<CATBaseUnknown_var,CATBaseUnknown_var>& ActivityArray,int layer);
  //提取与当前工序相关联的产品或资源
  CATBoolean GetRootRelatedItems(CATISPPAbstractActivity *piActivityOnActivity,MoveActivity* pMove);
  //提取与当前工序相关联的产品或资源
  CATBoolean GetRelatedItems(CATISPPAbstractActivity *piActivityOnActivity,MoveActivity* pMove);
  //获取节点类型
  CATBoolean GetPPRNodeType(CATISPPAbstractActivity *piActivityOnActivity);
  //获取节点图标
  CATUnicodeString GetPPRNodeIcon(CATISPPAbstractActivity *piActivityOnActivity);
  //从PERT图获取所有Move的时间
  CATBoolean GetPertMoveTime(CATISPPAbstractActivity_var spActivityOnActivity,int layer,ProcessNode *pNode);
  //获取根节点Process的开始的指针
  CATISPPAbstractActivity_var GetPPRStartPointer(CATISPPActivityRoot_var spActivityRoot);
  //插入新节点
  HRESULT InsertActivity(CATISPPActivity_var& spObjectActivity, CATISPPActivity_var& spInsertActivity,ActivityInsertType InsertType);
  //获取层的数量
  int GetLayerCount(CArray<ProcessNode*,ProcessNode*>& ProcessNodeArray);
  //获取Move的指针
  CATBoolean GetPPRMoveActivity(CArray<CATBaseUnknown_var,CATBaseUnknown_var>& ActivityArray);
  //设置Move路径的显隐性
  CATBoolean ShowOrHideActivity();
};

//-----------------------------------------------------------------------

#endif
