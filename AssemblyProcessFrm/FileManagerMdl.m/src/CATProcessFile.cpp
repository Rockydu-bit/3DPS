// COPYRIGHT Dassault Systemes 2015
//===================================================================
//
// CATProcessFile.cpp
// Header definition of CATProcessFile
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//
//  Oct 2015  Creation: Code generated by the CAA wizard  WANGJIAPENG
//===================================================================
#include "CATProcessFile.h"
#include "iostream.h"
#include "CATReportForm.h"

CATProcessFile* CATProcessFile::m_pProcessFile = NULL;

CATImplementClass( CATProcessFile,
                   Implementation, 
                   CATFile,
                   CATNull );
 
//-----------------------------------------------------------------------------
// CATProcessFile : constructor
//-----------------------------------------------------------------------------
CATProcessFile::CATProcessFile():
    CATFile()
{
}

//-----------------------------------------------------------------------------
// CATProcessFile : destructor
//-----------------------------------------------------------------------------
CATProcessFile::~CATProcessFile()
{
}
 
//-----------------------------------------------------------------------------
// CATProcessFile : copy constructor
//-----------------------------------------------------------------------------
CATProcessFile::CATProcessFile(CATProcessFile& original):
   CATFile(original)
{
}
 
//-----------------------------------------------------------------------------
// CATProcessFile : equal operator
//-----------------------------------------------------------------------------
CATProcessFile& CATProcessFile::operator=(CATProcessFile& original)
{
   CATFile::operator=(original);
   return *this;
}

CATProcessFile* CATProcessFile::GetInstance()
{
	if (m_pProcessFile == NULL)
	{
		m_pProcessFile = new CATProcessFile();
	}
	return m_pProcessFile;
}

void CATProcessFile::GetProcessAttr(CArray<CATUnicodeString,CATUnicodeString>& StringArray,CATPPRProcessModel* ProcessInfo)
{
	if (StringArray.GetSize() != 8)
	{
		return;
	}
	ProcessInfo->ProcessNum = StringArray.GetAt(0);
	ProcessInfo->ProcessName = StringArray.GetAt(1);
	ProcessInfo->ProcessStart = StringArray.GetAt(2);
	ProcessInfo->ProcessEnd = StringArray.GetAt(3);
	ProcessInfo->ProcessContent = StringArray.GetAt(4);
	ProcessInfo->ProcessRemark = StringArray.GetAt(5);
	ProcessInfo->ProcessCheckContent = StringArray.GetAt(6);
	ProcessInfo->ProcessCheckResult = StringArray.GetAt(7);
}

void CATProcessFile::GetStepAttr(CArray<CATUnicodeString,CATUnicodeString>& StepStringArray,CATPPRStepModel* StepInfo)
{
	if (StepStringArray.GetSize() != 17)
	{
		return;
	}
	StepInfo->StepNum = StepStringArray.GetAt(0);
	StepInfo->StepName = StepStringArray.GetAt(1);
	StepInfo->StepStart = StepStringArray.GetAt(2);
	StepInfo->StepEnd = StepStringArray.GetAt(3);
	StepInfo->StepContent = StepStringArray.GetAt(4);
	StepInfo->StepRemark = StepStringArray.GetAt(5);
	StepInfo->StepMaterialNum = StepStringArray.GetAt(6);
	StepInfo->StepMaterialName = StepStringArray.GetAt(7);
	StepInfo->StepMaterialRemark = StepStringArray.GetAt(8);
	StepInfo->StepEquiName = StepStringArray.GetAt(9);
	StepInfo->StepEquiVersion = StepStringArray.GetAt(10);
	StepInfo->StepEquiNum = StepStringArray.GetAt(11);
	StepInfo->StepSpecEqui = StepStringArray.GetAt(12);
	StepInfo->StepSpecTool = StepStringArray.GetAt(13);
	StepInfo->StepSpecFixture = StepStringArray.GetAt(14);
	StepInfo->StepSpecGage = StepStringArray.GetAt(15);
	StepInfo->StepEquiRemark = StepStringArray.GetAt(16);
}

CATBoolean CATProcessFile::SaveBOM(CArray<ProcessNode*,ProcessNode*> &ProcessNodeArray)
{
	if (ProcessNodeArray.GetSize() == 0)
	{
		return FALSE;
	}

	CString strContent;
	CString strPath = GetProgramPath();
	strPath = strPath + _T("\\Settings.txt");
	CStdioFile fifFile(strPath,CFile::modeRead);
	fifFile.ReadString(strContent);
	fifFile.Close();
	strContent = strContent + _T("\\BOM.txt");
	CStdioFile File;
	File.Open(strContent,CFile::modeCreate|CFile::modeReadWrite);
	int num = ProcessNodeArray.GetSize();
	CString strNum;
	strNum.Format(_T("%d"),num);
	File.WriteString(strNum);
	File.Write(_T("\n"),1);
	for (int i=0; i<ProcessNodeArray.GetSize(); i++)
	{
		strNum.Format(_T("%d"),ProcessNodeArray.GetAt(i)->layer);
		File.WriteString(strNum);
		File.Write(_T("\n"),1);
		File.WriteString(ProcessNodeArray.GetAt(i)->ProcessName);
		File.Write(_T("\n"),1);
	}
	File.Close();

	return TRUE;
}

CATBoolean CATProcessFile::SaveReportForm(CArray<CATPPRProcessModel*,CATPPRProcessModel*>& PPRProcessArray)
{
	CATReportForm *pReportForm = new CATReportForm();
	pReportForm->OutputExcel(PPRProcessArray);
	pReportForm->OutputHtml(PPRProcessArray);
	delete pReportForm;
	pReportForm = NULL;

	return TRUE;
}

CATBoolean CATProcessFile::SaveProcessInfo()
{
	CATIXMLDOMDocumentBuilder_var builder;
	CATUnicodeString String = NULL;
	HRESULT hr = ::CreateCATIXMLDOMDocumentBuilder(builder);
	if (SUCCEEDED(hr)&&(builder != NULL_var))
	{
		do
		{
			CATIDOMImplementation_var implementation;
			hr = builder->GetDOMImplementation(implementation);
			CATIDOMDocument_var document;
			hr = implementation->CreateDocument("","三维工艺",NULL_var,document);
			CATIDOMElement_var spProcessList;
			document->CreateElement("工艺列表",spProcessList);
			document->AppendChild(spProcessList);
			for (int i=0; i<PPRProcessArray.GetSize(); i++)
			{
				CATIDOMElement_var spProcess;
				document->CreateElement("工序",spProcess);
				CATIDOMElement_var spPro;
				document->CreateElement("工序属性",spPro);
				//工序编号
				CATIDOMElement_var spProcessNum;
				document->CreateElement("工序编号",spProcessNum);
				spProcessNum->SetAttribute("Attribute",PPRProcessArray.GetAt(i)->ProcessNum);
				//工序名称
				CATIDOMElement_var spProcessName;
				document->CreateElement("工序名称",spProcessName);
				spProcessName->SetAttribute("Attribute",PPRProcessArray.GetAt(i)->ProcessName);
				//开始时间
				CATIDOMElement_var spProcessStart;
				document->CreateElement("开始时间",spProcessStart);
				spProcessStart->SetAttribute("Attribute",PPRProcessArray.GetAt(i)->ProcessStart);
				//结束时间
				CATIDOMElement_var spProcessEnd;
				document->CreateElement("结束时间",spProcessEnd);
				spProcessEnd->SetAttribute("Attribute",PPRProcessArray.GetAt(i)->ProcessEnd);
				//工序内容
				CATIDOMElement_var spProcessContent;
				document->CreateElement("工序内容",spProcessContent);
				spProcessContent->SetAttribute("Attribute",PPRProcessArray.GetAt(i)->ProcessContent);
				//工序备注
				CATIDOMElement_var spProcessRemark;
				document->CreateElement("工序备注",spProcessRemark);
				spProcessRemark->SetAttribute("Attribute",PPRProcessArray.GetAt(i)->ProcessRemark);

				CATIDOMElement_var spTest;
				document->CreateElement("设置检验",spTest);
				//检验内容
				CATIDOMElement_var spProcessCheckContent;
				document->CreateElement("检验内容",spProcessCheckContent);
				spProcessCheckContent->SetAttribute("Attribute",PPRProcessArray.GetAt(i)->ProcessCheckContent);
				//检验结果
				CATIDOMElement_var spProcessCheckResult;
				document->CreateElement("检验结果",spProcessCheckResult);
				spProcessCheckResult->SetAttribute("Attribute",PPRProcessArray.GetAt(i)->ProcessCheckResult);

				CATIDOMElement_var spStepList;
				document->CreateElement("工步列表",spStepList);
				//写入工步节点
				SaveStepInfo(document,spStepList,i,PPRProcessArray.GetAt(i)->PPRStepArray);

				spProcessList->AppendChild(spProcess);
				spProcess->AppendChild(spPro);

				spPro->AppendChild(spProcessNum);
				spPro->AppendChild(spProcessName);
				spPro->AppendChild(spProcessStart);
				spPro->AppendChild(spProcessEnd);
				spPro->AppendChild(spProcessContent);
				spPro->AppendChild(spProcessRemark);

				spProcess->AppendChild(spTest);
				spTest->AppendChild(spProcessCheckContent);
				spTest->AppendChild(spProcessCheckResult);

				spProcess->AppendChild(spStepList);
			}
			CString strContent;
			CString strPath = GetProgramPath();
			strPath = strPath + _T("\\Settings.txt");
			CStdioFile fifFile(strPath,CFile::modeRead);
			fifFile.ReadString(strContent);
			fifFile.Close();
			strContent = strContent + _T("\\Process.xml");
			hr = builder->WriteToFile(document,ConvertToCATString(strContent));
		} while (0);
	}

	return TRUE;
}

CATBoolean CATProcessFile::SaveStepInfo(CATIDOMDocument_var document,CATIDOMElement_var spStepList,int num,CArray<CATPPRStepModel*,CATPPRStepModel*>& PPRStepArray)
{
	if (PPRStepArray.GetSize() == 0)
	{
		return FALSE;
	}

	for (int i=0; i<PPRStepArray.GetSize(); i++)
	{
		CATIDOMElement_var spStep;
		document->CreateElement("工步",spStep);

		CATIDOMElement_var spStepAttr;
		document->CreateElement("工步属性",spStepAttr);
		//工步编号
		CATIDOMElement_var spStepNum;
		document->CreateElement("工序编号",spStepNum);
		spStepNum->SetAttribute("Attribute",PPRStepArray.GetAt(i)->StepNum);
		//工步名称
		CATIDOMElement_var spStepName;
		document->CreateElement("工序名称",spStepName);
		spStepName->SetAttribute("Attribute",PPRStepArray.GetAt(i)->StepName);
		//开始时间
		CATIDOMElement_var spStepStart;
		document->CreateElement("开始时间",spStepStart);
		spStepStart->SetAttribute("Attribute",PPRStepArray.GetAt(i)->StepStart);
		//结束时间
		CATIDOMElement_var spStepEnd;
		document->CreateElement("结束时间",spStepEnd);
		spStepEnd->SetAttribute("Attribute",PPRStepArray.GetAt(i)->StepEnd);
		//工步内容
		CATIDOMElement_var spStepContent;
		document->CreateElement("工序内容",spStepContent);
		spStepContent->SetAttribute("Attribute",PPRStepArray.GetAt(i)->StepContent);
		//工步备注
		CATIDOMElement_var spStepRemark;
		document->CreateElement("工序备注",spStepRemark);
		spStepRemark->SetAttribute("Attribute",PPRStepArray.GetAt(i)->StepRemark);

		CATIDOMElement_var spMaterial;
		document->CreateElement("材料信息",spMaterial);
		//材料编号
		CATIDOMElement_var spStepMaterialNum;
		document->CreateElement("材料编号",spStepMaterialNum);
		spStepMaterialNum->SetAttribute("Attribute",PPRStepArray.GetAt(i)->StepMaterialNum);
		//材料名称
		CATIDOMElement_var spStepMaterialName;
		document->CreateElement("材料名称",spStepMaterialName);
		spStepMaterialName->SetAttribute("Attribute",PPRStepArray.GetAt(i)->StepMaterialName);
		//材料备注
		CATIDOMElement_var spStepMaterialRemark;
		document->CreateElement("材料备注",spStepMaterialRemark);
		spStepMaterialRemark->SetAttribute("Attribute",PPRStepArray.GetAt(i)->StepMaterialRemark);

		CATIDOMElement_var spToolAndEqui;
		document->CreateElement("装配资源",spToolAndEqui);
		//设备名称
		CATIDOMElement_var spStepEquiName;
		document->CreateElement("设备名称",spStepEquiName);
		spStepEquiName->SetAttribute("Attribute",PPRStepArray.GetAt(i)->StepEquiName);
		//设备型号
		CATIDOMElement_var spStepEquiVersion;
		document->CreateElement("设备型号",spStepEquiVersion);
		spStepEquiVersion->SetAttribute("Attribute",PPRStepArray.GetAt(i)->StepEquiVersion);
		//工装号
		CATIDOMElement_var spStepEquiNum;
		document->CreateElement("工装号",spStepEquiNum);
		spStepEquiNum->SetAttribute("Attribute",PPRStepArray.GetAt(i)->StepEquiNum);
		//专用工装
		CATIDOMElement_var spStepSpecEqui;
		document->CreateElement("专用工装",spStepSpecEqui);
		spStepSpecEqui->SetAttribute("Attribute",PPRStepArray.GetAt(i)->StepSpecEqui);
		//专用工具
		CATIDOMElement_var spStepSpecTool;
		document->CreateElement("专用工具",spStepSpecTool);
		spStepSpecTool->SetAttribute("Attribute",PPRStepArray.GetAt(i)->StepSpecTool);
		//专用夹具
		CATIDOMElement_var spStepSpecFixture;
		document->CreateElement("专用夹具",spStepSpecFixture);
		spStepSpecFixture->SetAttribute("Attribute",PPRStepArray.GetAt(i)->StepSpecFixture);
		//专用量具
		CATIDOMElement_var spStepSpecGage;
		document->CreateElement("专用量具",spStepSpecGage);
		spStepSpecGage->SetAttribute("Attribute",PPRStepArray.GetAt(i)->StepSpecGage);
		//工装备注
		CATIDOMElement_var spStepEquiRemark;
		document->CreateElement("工装备注",spStepEquiRemark);
		spStepEquiRemark->SetAttribute("Attribute",PPRStepArray.GetAt(i)->StepEquiRemark);

		CATIDOMElement_var spOperationDetails;
		document->CreateElement("操作明细表",spOperationDetails);
		//Move Activity信息
		for (int j=0; j<PPRStepArray.GetAt(i)->MoveArray.GetSize(); j++)
		{
			CString strPartName = _T("");
			//Move节点
			CATIDOMElement_var spMove;
			document->CreateElement("MoveActivity",spMove);//名称不能有空格
			
			//Move名称
			CATIDOMElement_var spMoveName;
			document->CreateElement("MoveName",spMoveName);//名称不能有空格
			CATUnicodeString strMoveName = ConvertToCATString(PPRStepArray.GetAt(i)->MoveArray.GetAt(j)->MoveName);
			spMoveName->SetAttribute("Attribute",strMoveName);
			
			//Move关联的零部件名称
			CATIDOMElement_var spPartName;
			document->CreateElement("Part",spPartName);
			for (int z=0; z<PPRStepArray.GetAt(i)->MoveArray.GetAt(j)->ProcessItemArray.GetSize(); z++)
			{
				strPartName = strPartName + PPRStepArray.GetAt(i)->MoveArray.GetAt(j)->ProcessItemArray.GetAt(z) + _T(";");
			}
			spPartName->SetAttribute("Attribute",ConvertToCATString(strPartName));
			
			//开始时间
			CATIDOMElement_var spMoveStart;
			document->CreateElement("Start",spMoveStart);
			CATUnicodeString strTime;
			strTime.BuildFromNum(PPRStepArray.GetAt(i)->MoveArray.GetAt(j)->beginTime);
			spMoveStart->SetAttribute("Attribute",strTime);

			//结束时间
			CATIDOMElement_var spMoveEnd;
			document->CreateElement("End",spMoveEnd);
			strTime.BuildFromNum(PPRStepArray.GetAt(i)->MoveArray.GetAt(j)->endTime);
			spMoveEnd->SetAttribute("Attribute",strTime);

			spOperationDetails->AppendChild(spMove);
			spMove->AppendChild(spMoveName);
			spMove->AppendChild(spPartName);
			spMove->AppendChild(spMoveStart);
			spMove->AppendChild(spMoveEnd);
		}

		CATIDOMElement_var spStepInStepList;
		document->CreateElement("子工步列表",spStepInStepList);
		//写入工步节点
		SaveStepInfo(document,spStepInStepList,i,PPRStepArray.GetAt(i)->PPRStepArray);

		spStepList->AppendChild(spStep);

		spStep->AppendChild(spStepAttr);
		spStepAttr->AppendChild(spStepNum);
		spStepAttr->AppendChild(spStepName);
		spStepAttr->AppendChild(spStepStart);
		spStepAttr->AppendChild(spStepEnd);
		spStepAttr->AppendChild(spStepContent);
		spStepAttr->AppendChild(spStepRemark);

		spStep->AppendChild(spMaterial);
		spMaterial->AppendChild(spStepMaterialNum);
		spMaterial->AppendChild(spStepMaterialName);
		spMaterial->AppendChild(spStepMaterialRemark);

		spStep->AppendChild(spToolAndEqui);
		spToolAndEqui->AppendChild(spStepEquiName);
		spToolAndEqui->AppendChild(spStepEquiVersion);
		spToolAndEqui->AppendChild(spStepEquiNum);
		spToolAndEqui->AppendChild(spStepSpecEqui);
		spToolAndEqui->AppendChild(spStepSpecTool);
		spToolAndEqui->AppendChild(spStepSpecFixture);
		spToolAndEqui->AppendChild(spStepSpecGage);
		spToolAndEqui->AppendChild(spStepEquiRemark);

		spStep->AppendChild(spOperationDetails);

		spStep->AppendChild(spStepInStepList);
	}

	return TRUE;
}

CATBoolean CATProcessFile::ParseProcessInfo()
{
	PPRProcessArray.RemoveAll();
	CATIXMLDOMDocumentBuilder_var builder;
	HRESULT hr = ::CreateCATIXMLDOMDocumentBuilder(builder);
	if (SUCCEEDED(hr)&&(builder != NULL_var))
	{
		CATListOfCATUnicodeString readOptions;
		readOptions.Append("CATDoValidation");
		CATListOfCATUnicodeString readOptionValues;
		readOptionValues.Append("false");
		CATIDOMDocument_var document;

		CString strContent;
		CString strPath = GetProgramPath();
		strPath = strPath + _T("\\Settings.txt");
		CStdioFile fifFile(strPath,CFile::modeRead);
		fifFile.ReadString(strContent);
		fifFile.Close();
		strContent = strContent + _T("\\Process.xml");
		CATUnicodeString string = ConvertToCATString(strContent);
		hr = builder->Parse(string,document,readOptions,readOptionValues);
		if (SUCCEEDED(hr)&&(document != NULL_var))
		{
			do 
			{
				CATIDOMElement_var spDOMElement = NULL_var;
				CATIDOMNodeList_var spNodeList = NULL_var;
				hr = document->GetDocumentElement(spDOMElement);
				if (SUCCEEDED(hr)&&(spDOMElement != NULL_var))
				{
					spDOMElement->GetElementsByTagName("工序",spNodeList);
					if (spNodeList != NULL_var)
					{
						unsigned int num = 0;
						spNodeList->GetLength(num);
						CATIDOMNode_var spDOMNode = NULL_var;
						//获取工序列表
						for (int i=0; i<num; i++)
						{
							StringArray.RemoveAll();
							PPRStepArray.RemoveAll();
							CATPPRProcessModel *pProcessAttr = new CATPPRProcessModel();
							spNodeList->Item(i,spDOMNode);//第i道工序
							CATIDOMNodeList_var spChildNodeList = NULL_var;
							spDOMNode->GetChildNodes(spChildNodeList);
							if (spChildNodeList != NULL_var)
							{
								unsigned int childnum = 0;
								spChildNodeList->GetLength(childnum);//节点个数
								CATIDOMNode_var spDOMChildNode = NULL_var;
								for (int j=0; j<childnum-1; j++)
								{
									spChildNodeList->Item(j,spDOMChildNode);//第j个节点
									CATIDOMNodeList_var spLastNodeList = NULL_var;
									spDOMChildNode->GetChildNodes(spLastNodeList);
									if (spLastNodeList != NULL_var)
									{
										unsigned int lastnum = 0;
										spLastNodeList->GetLength(lastnum);//节点下的子节点
										CATIDOMNode_var spDOMLastNode = NULL_var;
										CATIDOMElement *pLastElement = NULL;
										CATUnicodeString Value;
										for (int j=0; j<lastnum; j++)
										{
											spLastNodeList->Item(j,spDOMLastNode);
											hr = spDOMLastNode->QueryInterface(IID_CATIDOMElement,(void**)&pLastElement);
											if (SUCCEEDED(hr))
											{
												hr = pLastElement->GetAttribute("Attribute",Value);
												StringArray.Add(Value);
											}
										}
										pLastElement->Release();
										pLastElement = NULL;
									}
								}
							}
							GetProcessAttr(StringArray,pProcessAttr);
							PPRProcessArray.Add(pProcessAttr);
							ParseStepInfo(spChildNodeList,PPRStepArray);
							PPRProcessArray.GetAt(i)->PPRStepArray.Copy(PPRStepArray);
						}
					}
				}
			} while (0);
		}
	}

	return TRUE;
}

CATBoolean CATProcessFile::ParseStepInfo(CATIDOMNodeList_var spNodeList,CArray<CATPPRStepModel*,CATPPRStepModel*>& PPRStepArray)
{
	HRESULT hr = S_FALSE;
	unsigned int num = 0;
	CArray<CATUnicodeString,CATUnicodeString> StepStringArray;
	CATIDOMNode_var spDOMListNode = NULL_var;
	spNodeList->GetLength(num);
	spNodeList->Item(num-1,spDOMListNode);//节点工步列表
	CATIDOMNodeList_var spStepNodeList = NULL_var;
	spDOMListNode->GetChildNodes(spStepNodeList);
	if (spStepNodeList != NULL_var)
	{
		unsigned int childnum = 0;
		spStepNodeList->GetLength(childnum);//节点下的工步节点
		if (childnum == 0)
		{
			return FALSE;
		}
		CATIDOMNode_var spDOMChildNode = NULL_var;
		for (int i=0; i<childnum; i++)
		{
			StepStringArray.RemoveAll();
			CATPPRStepModel *pStepAttr = new CATPPRStepModel();
			spStepNodeList->Item(i,spDOMChildNode);//第i个工步
			CATIDOMNodeList_var spLastNodeList = NULL_var;
			spDOMChildNode->GetChildNodes(spLastNodeList);
			if (spLastNodeList != NULL_var)
			{
				unsigned int lastnum = 0;
				spLastNodeList->GetLength(lastnum);//工步下的子节点
				CATIDOMNode_var spDOMLastNode = NULL_var;
				for (int j=0; j<lastnum-2; j++)
				{
					spLastNodeList->Item(j,spDOMLastNode);//第j个节点
					CATIDOMNodeList_var spAttrNodeList = NULL_var;
					spDOMLastNode->GetChildNodes(spAttrNodeList);
					if (spLastNodeList != NULL_var)
					{
						unsigned int lastnum = 0;
						spAttrNodeList->GetLength(lastnum);//节点下的子节点
						CATIDOMNode_var spDOMAttrNode = NULL_var;
						CATIDOMElement *pLastElement = NULL;
						CATUnicodeString Value;
						for (int k=0; k<lastnum; k++)
						{
							spAttrNodeList->Item(k,spDOMAttrNode);
							hr = spDOMAttrNode->QueryInterface(IID_CATIDOMElement,(void**)&pLastElement);
							if (SUCCEEDED(hr))
							{
								hr = pLastElement->GetAttribute("Attribute",Value);
								StepStringArray.Add(Value);
							}
						}
						pLastElement->Release();
						pLastElement = NULL;
					}
				}
				CATIDOMElement *pLastElement = NULL;
			}
			GetStepAttr(StepStringArray,pStepAttr);
			PPRStepArray.Add(pStepAttr);
			ParseStepInfo(spLastNodeList,PPRStepArray.GetAt(i)->PPRStepArray);
		}
	}

	return TRUE;
}
