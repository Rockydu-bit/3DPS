// COPYRIGHT Dassault Systemes 2015
//===================================================================
//
// CDlgModifyProperties.cpp
// The dialog : CDlgModifyProperties
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//
//  Oct 2015  Creation: Code generated by the CAA wizard  WANGJIAPENG
//===================================================================
#include "CDlgModifyProperties.h"
#include "CATApplicationFrame.h"
#include "CATDlgGridConstraints.h"
#include "CATMsgCatalog.h"
#include "CATISPPActivity.h"

#ifdef CDlgModifyProperties_ParameterEditorInclude
#include "CATIParameterEditorFactory.h"
#include "CATIParameterEditor.h"
#include "CATICkeParm.h"
#endif



CDlgModifyProperties* CDlgModifyProperties::m_pDlgProperties = NULL;
//-------------------------------------------------------------------------
// Constructor
//-------------------------------------------------------------------------
CDlgModifyProperties::CDlgModifyProperties() :
  CATDlgDialog ((CATApplicationFrame::GetApplicationFrame())->GetMainWindow(),
//CAA2 WIZARD CONSTRUCTOR DECLARATION SECTION
"CDlgModifyProperties",CATDlgWndBtnOKCancel|CATDlgGridLayout
//END CAA2 WIZARD CONSTRUCTOR DECLARATION SECTION
                               )
{
//CAA2 WIZARD CONSTRUCTOR INITIALIZATION SECTION
 _Frame002 = NULL;
 _RadioButtonDelete = NULL;
 _RadioButtonAfter = NULL;
 _RadioButtonChangeName = NULL;
 _LabelName = NULL;
 _EditorName = NULL;
 _RadioButtonBefore = NULL;
 _RadioButtonChild = NULL;
 _FrameBOMTree = NULL;
//END CAA2 WIZARD CONSTRUCTOR INITIALIZATION SECTION
 pPPRProcess = CATPPRProcess::GetInstance();
 int layer = 0;
 pPPRProcess->GetPPRRootPointer(pPPRProcess->GetCurrentDocument());
 pPPRProcess->GetPPRNodeInfo(pPPRProcess->FirstLayerActivity,layer);
 ProcessNodeArray.Copy(pPPRProcess->ProcessNodeArray);
}

//-------------------------------------------------------------------------
// Destructor
//-------------------------------------------------------------------------
CDlgModifyProperties::~CDlgModifyProperties()
{
//  Do not delete the control elements of your dialog: 
//     this is done automatically
//  --------------------------------------------------
//CAA2 WIZARD DESTRUCTOR DECLARATION SECTION
 _Frame002 = NULL;
 _RadioButtonDelete = NULL;
 _RadioButtonAfter = NULL;
 _RadioButtonChangeName = NULL;
 _LabelName = NULL;
 _EditorName = NULL;
 _RadioButtonBefore = NULL;
 _RadioButtonChild = NULL;
 _FrameBOMTree = NULL;
//END CAA2 WIZARD DESTRUCTOR DECLARATION SECTION
 if (m_pDlgProperties != NULL) 
 {
	 m_pDlgProperties->RequestDelayedDestruction();
	 m_pDlgProperties = NULL;
 }
}

CDlgModifyProperties* CDlgModifyProperties::GetInstance()
{
	if (m_pDlgProperties == NULL)
	{
		m_pDlgProperties = new CDlgModifyProperties();
	}
	return m_pDlgProperties;
}

void CDlgModifyProperties::Build()
{
//  TODO: This call builds your dialog from the layout declaration file
//  -------------------------------------------------------------------

//CAA2 WIZARD WIDGET CONSTRUCTION SECTION
 SetGridRowResizable(0,1);
 SetGridColumnResizable(0,1);
 _Frame002 = new CATDlgFrame(this, "Frame002", CATDlgFraNoFrame|CATDlgGridLayout);
_Frame002 -> SetGridConstraints(0, 1, 1, 1, CATGRID_4SIDES);
 _RadioButtonDelete = new CATDlgRadioButton(_Frame002, "RadioButtonDelete");
_RadioButtonDelete -> SetGridConstraints(3, 0, 1, 1, CATGRID_4SIDES);
 _RadioButtonAfter = new CATDlgRadioButton(_Frame002, "RadioButtonAfter");
_RadioButtonAfter -> SetGridConstraints(0, 0, 1, 1, CATGRID_4SIDES);
 _RadioButtonChangeName = new CATDlgRadioButton(_Frame002, "RadioButtonChangeName");
_RadioButtonChangeName -> SetGridConstraints(4, 0, 1, 1, CATGRID_4SIDES);
 _LabelName = new CATDlgLabel(_Frame002, "LabelName");
_LabelName -> SetGridConstraints(6, 0, 1, 1, CATGRID_4SIDES);
 _EditorName = new CATDlgEditor(_Frame002, "EditorName");
_EditorName -> SetGridConstraints(7, 0, 1, 1, CATGRID_4SIDES);
 _RadioButtonBefore = new CATDlgRadioButton(_Frame002, "RadioButtonBefore");
_RadioButtonBefore -> SetGridConstraints(2, 0, 1, 1, CATGRID_4SIDES);
 _RadioButtonChild = new CATDlgRadioButton(_Frame002, "RadioButtonChild");
_RadioButtonChild -> SetGridConstraints(1, 0, 1, 1, CATGRID_4SIDES);
 _FrameBOMTree = new CATDlgFrame(this, "FrameBOMTree", CATDlgGridLayout);
_FrameBOMTree -> SetGridConstraints(0, 0, 1, 1, CATGRID_4SIDES);
//END CAA2 WIZARD WIDGET CONSTRUCTION SECTION
_RadioButtonAfter->SetState(CATDlgCheck);
strFlag = _T("After");
CATDlgWindow *pFrmWindow = NULL;
pFrmWindow = (CATApplicationFrame::GetApplicationFrame())->GetApplicationDocument();
DRECT rect;
pFrmWindow->GetRectDimensions(&rect);
int width = 400;
int height = 400;
this->SetRectDimensions((rect.dx-width)/2,(rect.dy-height)/2,height,width);
//生成BOM树
GenerateBOMTree(_FrameBOMTree,ProcessNodeArray);
//CAA2 WIZARD CALLBACK DECLARATION SECTION
     AddAnalyseNotificationCB (_RadioButtonChild, 
                               _RadioButtonChild->GetRadBModifyNotification(),
                               (CATCommandMethod)&CDlgModifyProperties::OnRadioButtonChildRadBModifyNotification,
                               NULL);
     AddAnalyseNotificationCB (_RadioButtonChangeName, 
                               _RadioButtonChangeName->GetRadBModifyNotification(),
                               (CATCommandMethod)&CDlgModifyProperties::OnRadioButtonChangeNameRadBModifyNotification,
                               NULL);
     AddAnalyseNotificationCB (_RadioButtonDelete, 
                               _RadioButtonDelete->GetRadBModifyNotification(),
                               (CATCommandMethod)&CDlgModifyProperties::OnRadioButtonDeleteRadBModifyNotification,
                               NULL);
     AddAnalyseNotificationCB (_RadioButtonAfter, 
                               _RadioButtonAfter->GetRadBModifyNotification(),
                               (CATCommandMethod)&CDlgModifyProperties::OnRadioButtonAfterRadBModifyNotification,
                               NULL);
     AddAnalyseNotificationCB (_RadioButtonBefore, 
                               _RadioButtonBefore->GetRadBModifyNotification(),
                               (CATCommandMethod)&CDlgModifyProperties::OnRadioButtonBeforeRadBModifyNotification,
                               NULL);
//END CAA2 WIZARD CALLBACK DECLARATION SECTION
}


CATBoolean CDlgModifyProperties::GenerateBOMTree(CATDlgFrame* frame,CArray<ProcessNode*,ProcessNode*>& ProcessNodeArray)
{
	if (ProcessNodeArray.GetSize() == 0)
	{
		return FALSE;
	}

	frame->SetGridRowResizable(0,1);
	frame->SetGridColumnResizable(0,1);
	pTreeCtrl = new CAATreeCtrl(frame,"TreeCtrl");
	pTreeCtrl->SetGridConstraints(0,0,1,1,CATGRID_4SIDES);
	pTreeCtrl->AddRootTreeNode(pPPRProcess->ConvertToCATString(ProcessNodeArray.GetAt(0)->ProcessNum+_T(".")+ProcessNodeArray.GetAt(0)->ProcessName),"");
	CATBaseUnknown *pTreeNode = NULL;
	CATBaseUnknown* pFatherNode = NULL;
	pTreeCtrl->GetRootTreeNodeAt(1,&pTreeNode);
	CString str;
	for (int i=1; i<ProcessNodeArray.GetSize(); i++)
	{
		int num = ProcessNodeArray.GetAt(i)->layer - ProcessNodeArray.GetAt(i-1)->layer;
		//同级
		if (num == 0)
		{
			pTreeCtrl->GetFatherTreeNode(pTreeNode,&pFatherNode);
			pTreeNode = pFatherNode;
			str = ProcessNodeArray.GetAt(i)->ProcessNum + _T(".") + ProcessNodeArray.GetAt(i)->ProcessName;
			pTreeNode = pTreeCtrl->AddChildTreeNode(pTreeNode,pPPRProcess->ConvertToCATString(str),"");
		}
		//下一级
		if (num == 1)
		{
			str = ProcessNodeArray.GetAt(i)->ProcessNum + _T(".") + ProcessNodeArray.GetAt(i)->ProcessName;
			pTreeNode = pTreeCtrl->AddChildTreeNode(pTreeNode,pPPRProcess->ConvertToCATString(str),"");
		}
		//上N级
		if (num < 0)
		{
			num = -num;
			for (int j=0; j<=num; j++)
			{
				pTreeCtrl->GetFatherTreeNode(pTreeNode,&pFatherNode);
				pTreeNode = pFatherNode;
			}
			str = ProcessNodeArray.GetAt(i)->ProcessNum + _T(".") + ProcessNodeArray.GetAt(i)->ProcessName;
			pTreeNode = pTreeCtrl->AddChildTreeNode(pTreeNode,pPPRProcess->ConvertToCATString(str),"");
		}
	}
	//设置第一个为选中状态
	int iTreeNodeRank = 1;
	CATBaseUnknown *opTreeNodeObject = new CATBaseUnknown();
	pTreeCtrl->GetRootTreeNodeAt(iTreeNodeRank,&opTreeNodeObject);
	pTreeCtrl->SelectTreeNode(opTreeNodeObject);
	AddCallback(pTreeCtrl,TreeNodeSelectNotif::ClassName(),(CATSubscriberMethod)&CDlgModifyProperties::OnTreeNodeSelect,NULL);

	return TRUE;
}

void CDlgModifyProperties::OnTreeNodeSelect(CATCallbackEvent event, void * client, CATNotification * iNotification, CATSubscriberData data, 
										CATCallback callback)
{
	CATBaseUnknown * pTreeNode = NULL;
	pTreeCtrl -> GetSelectedTreeNode(&pTreeNode);
	pTreeCtrl -> GetCertainRootTreeNodeLocate(m_NodeLocate,pTreeNode);

	CATUnicodeString strName;
	pTreeCtrl->GetTreeNodeText(pTreeNode,strName);
	strNameAndNum = pPPRProcess->ConvertToCString(strName);

	CATUnicodeString strLocate;
	strLocate.BuildFromNum(m_NodeLocate);

	SetFocusOn(pTreeCtrl);
}

CATBoolean CDlgModifyProperties::ModifyBOMTree()
{
	if (strFlag == _T("Before"))
	{
		int temp = GetSelectedProcessNode(strNameAndNum);
		CATISPPActivity_var spInsertActivity = ProcessNodeArray.GetAt(temp)->piChildMgtOnActivity->AddChild(GetEditorContent(_EditorName));
		pPPRProcess->InsertActivity(ProcessNodeArray.GetAt(temp)->piActivityOnActivity->GetMother(),spInsertActivity,InsertBefore);
	}
	if (strFlag == _T("After"))
	{
		int temp = GetSelectedProcessNode(strNameAndNum);
		CATISPPActivity_var spInsertActivity = ProcessNodeArray.GetAt(temp)->piChildMgtOnActivity->AddChild(GetEditorContent(_EditorName));
		pPPRProcess->InsertActivity(ProcessNodeArray.GetAt(temp)->piActivityOnActivity->GetMother(),spInsertActivity,InsertAfter);
	}
	if (strFlag == _T("Child"))
	{
		int temp = GetSelectedProcessNode(strNameAndNum);
		CATISPPActivity_var spInsertActivity = ProcessNodeArray.GetAt(temp)->piChildMgtOnActivity->AddChild(GetEditorContent(_EditorName));
		pPPRProcess->InsertActivity(ProcessNodeArray.GetAt(temp)->piActivityOnActivity->GetMother(),spInsertActivity,InsertAsChild);
	}
	if (strFlag == _T("Delete"))
	{
		int temp = GetSelectedProcessNode(strNameAndNum);
		ProcessNodeArray.GetAt(temp)->piChildMgtOnActivity->RemoveChild();
	}
	if (strFlag == _T("Change"))
	{
		CATUnicodeString strContent;
		_EditorName->GetLine(strContent,0);
		if (pPPRProcess->ConvertToCString(strContent) == _T(""))
		{
			AfxMessageBox(_T("请重新输入修改后的名称"));
			return FALSE;
		}
		int temp = GetSelectedProcessNode(strNameAndNum);
		if (temp != -1)
		{
			ProcessNodeArray.GetAt(temp)->piActivityOnActivity->SetLabel(strContent);
		}
	}

	return TRUE;
}

int CDlgModifyProperties::GetSelectedProcessNode(CString strNode)
{
	CString strtemp;
	int start = 0;
	int end = strNode.Find(_T("."));
	strtemp = strNode.Mid(start,end);
	for (int i=0; i<ProcessNodeArray.GetSize(); i++)
	{
		if (strtemp == ProcessNodeArray.GetAt(i)->ProcessNum)
		{
			return i;
		}
	}

	return -1;
}

CATUnicodeString CDlgModifyProperties::GetEditorContent(CATDlgEditor* _Editor)
{
	CATUnicodeString content("");
	CATUnicodeString linecontent("");
	int count = _Editor->GetLineCount();
	for (int i=0; i<count; i++)
	{
		_Editor->GetLine(linecontent,i);
		content = content + linecontent;
	}

	return content;
}

//-------------------------------------------------------------------------
// Callback on RadBModify of _RadioButtonAfter
//-------------------------------------------------------------------------
void CDlgModifyProperties::OnRadioButtonAfterRadBModifyNotification(CATCommand* cmd, CATNotification* evt, CATCommandClientData data)
{
  // Add your code here
	strFlag = _T("After");
	_EditorName->SetSensitivity(CATDlgEnable);
}


//-------------------------------------------------------------------------
// Callback on RadBModify of _RadioButtonDelete
//-------------------------------------------------------------------------
void CDlgModifyProperties::OnRadioButtonDeleteRadBModifyNotification(CATCommand* cmd, CATNotification* evt, CATCommandClientData data)
{
  // Add your code here
	strFlag = _T("Delete");
	_EditorName->SetSensitivity(CATDlgDisable);
}


//-------------------------------------------------------------------------
// Callback on RadBModify of _RadioButtonChangeName
//-------------------------------------------------------------------------
void CDlgModifyProperties::OnRadioButtonChangeNameRadBModifyNotification(CATCommand* cmd, CATNotification* evt, CATCommandClientData data)
{
  // Add your code here
	strFlag = _T("Change");
	_EditorName->SetSensitivity(CATDlgEnable);
}

//-------------------------------------------------------------------------
// Callback on RadBModify of _RadioButtonBefore
//-------------------------------------------------------------------------
void CDlgModifyProperties::OnRadioButtonBeforeRadBModifyNotification(CATCommand* cmd, CATNotification* evt, CATCommandClientData data)
{
  // Add your code here
	strFlag = _T("Before");
	_EditorName->SetSensitivity(CATDlgEnable);
}

//-------------------------------------------------------------------------
// Callback on RadBModify of _RadioButtonChild
//-------------------------------------------------------------------------
void CDlgModifyProperties::OnRadioButtonChildRadBModifyNotification(CATCommand* cmd, CATNotification* evt, CATCommandClientData data)
{
  // Add your code here
	strFlag = _T("Child");
	_EditorName->SetSensitivity(CATDlgEnable);
}
