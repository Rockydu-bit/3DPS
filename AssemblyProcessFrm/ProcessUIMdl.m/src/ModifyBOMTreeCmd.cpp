// COPYRIGHT Dassault Systemes 2015
//===================================================================
//
// ModifyBOMTreeCmd.cpp
// The state chart based command: ModifyBOMTreeCmd
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//
//  Oct 2015  Creation: Code generated by the CAA wizard  WANGJIAPENG
//===================================================================
#include "ModifyBOMTreeCmd.h"

#include "CATCreateExternalObject.h"
CATCreateClass( ModifyBOMTreeCmd);


//-------------------------------------------------------------------------
// Constructor
//-------------------------------------------------------------------------
ModifyBOMTreeCmd::ModifyBOMTreeCmd() :
  CATStateCommand ("ModifyBOMTreeCmd", CATDlgEngOneShot, CATCommandModeExclusive) 
//  Valid states are CATDlgEngOneShot and CATDlgEngRepeat
, pOkBut(NULL), pCancelBut(NULL), pCloseBut(NULL)
{
	pDlgProperties = new CDlgModifyProperties();
	pDlgProperties->Build();
	pDlgProperties->SetVisibility(CATDlgShow);
}

//-------------------------------------------------------------------------
// Destructor
//-------------------------------------------------------------------------
ModifyBOMTreeCmd::~ModifyBOMTreeCmd()
{
	if (pOkBut != NULL)
	{
		pOkBut->RequestDelayedDestruction();
		pOkBut = NULL;
	}
	if (pCancelBut != NULL)
	{
		pCancelBut->RequestDelayedDestruction();
		pCancelBut = NULL;
	}
	if (pCloseBut != NULL)
	{
		pCloseBut->RequestDelayedDestruction();
		pCloseBut = NULL;
	}
	if (pDlgProperties != NULL) 
	{
		pDlgProperties->RequestDelayedDestruction();
		pDlgProperties = NULL;
	}
}


//-------------------------------------------------------------------------
// BuildGraph()
//-------------------------------------------------------------------------
void ModifyBOMTreeCmd::BuildGraph()
{
  // TODO: Define the StateChart 
  // ---------------------------
	pOkBut = new CATDialogAgent("OK");
	pCloseBut = new CATDialogAgent("Close");
	pCancelBut = new CATDialogAgent("Cancel");

	pOkBut->AcceptOnNotify(pDlgProperties,pDlgProperties->GetDiaOKNotification());
	pCancelBut->AcceptOnNotify(pDlgProperties,pDlgProperties->GetWindCloseNotification());
	pCloseBut->AcceptOnNotify(pDlgProperties,pDlgProperties->GetDiaCANCELNotification());

	CATDialogState* pState = GetInitialState("OK");
	pState->AddDialogAgent(pOkBut);
	pState->AddDialogAgent(pCloseBut);
	pState->AddDialogAgent(pCancelBut);

	AddTransition(pState,NULL,IsOutputSetCondition(pOkBut),Action((ActionMethod)&ModifyBOMTreeCmd::ActionOK));
	AddTransition(pState,NULL,IsOutputSetCondition(pCloseBut),Action((ActionMethod)&ModifyBOMTreeCmd::ActionClose));
	AddTransition(pState,NULL,IsOutputSetCondition(pCancelBut),Action((ActionMethod)&ModifyBOMTreeCmd::ActionCancel));
}

CATBoolean ModifyBOMTreeCmd::ActionOK( void *data )
{
	// TODO: Define the action associated with the transition 
	// ------------------------------------------------------
	pDlgProperties->ModifyBOMTree();
	if (pDlgProperties)
	{
		pDlgProperties->RequestDelayedDestruction();
		pDlgProperties = NULL;
	}
	return TRUE;
}

CATBoolean ModifyBOMTreeCmd::ActionCancel( void *data )
{
	// TODO: Define the action associated with the transition 
	// ------------------------------------------------------
	if (pDlgProperties)
	{
		pDlgProperties->RequestDelayedDestruction();
		pDlgProperties = NULL;
	}

	return TRUE;
}

CATBoolean ModifyBOMTreeCmd::ActionClose( void *data )
{
	// TODO: Define the action associated with the transition 
	// ------------------------------------------------------
	if (pDlgProperties)
	{
		pDlgProperties->RequestDelayedDestruction();
		pDlgProperties = NULL;
	}

	return TRUE;
}
