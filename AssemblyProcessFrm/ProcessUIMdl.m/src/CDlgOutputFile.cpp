// COPYRIGHT Dassault Systemes 2015
//===================================================================
//
// CDlgOutputFile.cpp
// The dialog : CDlgOutputFile
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//
//  Nov 2015  Creation: Code generated by the CAA wizard  WANGJIAPENG
//===================================================================
#include "CDlgOutputFile.h"
#include "CATApplicationFrame.h"
#include "CATDlgGridConstraints.h"
#include "CATMsgCatalog.h"
#include "CATFile.h"
#include "CATProcessFile.h"

#ifdef CDlgOutputFile_ParameterEditorInclude
#include "CATIParameterEditorFactory.h"
#include "CATIParameterEditor.h"
#include "CATICkeParm.h"
#endif




//-------------------------------------------------------------------------
// Constructor
//-------------------------------------------------------------------------
CDlgOutputFile::CDlgOutputFile() :
  CATDlgDialog ((CATApplicationFrame::GetApplicationFrame())->GetMainWindow(),
//CAA2 WIZARD CONSTRUCTOR DECLARATION SECTION
"CDlgOutputFile",CATDlgWndBtnOKCancel|CATDlgGridLayout
//END CAA2 WIZARD CONSTRUCTOR DECLARATION SECTION
                               )
{
//CAA2 WIZARD CONSTRUCTOR INITIALIZATION SECTION
 _Frame006 = NULL;
 _CheckButtonProcess = NULL;
 _CheckButtonParts = NULL;
 _CheckButtonProcessEqui = NULL;
 _Frame007 = NULL;
 _EditorAddress = NULL;
 _PushButtonBrowser = NULL;
//END CAA2 WIZARD CONSTRUCTOR INITIALIZATION SECTION


//END CAA2 WIZARD CONSTRUCTOR INITIALIZATION SECTION


//END CAA2 WIZARD CONSTRUCTOR INITIALIZATION SECTION
}

//-------------------------------------------------------------------------
// Destructor
//-------------------------------------------------------------------------
CDlgOutputFile::~CDlgOutputFile()
{
//  Do not delete the control elements of your dialog: 
//     this is done automatically
//  --------------------------------------------------
//CAA2 WIZARD DESTRUCTOR DECLARATION SECTION
 _Frame006 = NULL;
 _CheckButtonProcess = NULL;
 _CheckButtonParts = NULL;
 _CheckButtonProcessEqui = NULL;
 _Frame007 = NULL;
 _EditorAddress = NULL;
 _PushButtonBrowser = NULL;
//END CAA2 WIZARD DESTRUCTOR DECLARATION SECTION


//END CAA2 WIZARD DESTRUCTOR DECLARATION SECTION


//END CAA2 WIZARD DESTRUCTOR DECLARATION SECTION
}



void CDlgOutputFile::Build()
{
//  TODO: This call builds your dialog from the layout declaration file
//  -------------------------------------------------------------------

//CAA2 WIZARD WIDGET CONSTRUCTION SECTION
 _Frame006 = new CATDlgFrame(this, "Frame006", CATDlgFraNoFrame|CATDlgGridLayout);
_Frame006 -> SetGridConstraints(0, 0, 1, 1, CATGRID_4SIDES);
 _CheckButtonProcess = new CATDlgCheckButton(_Frame006, "CheckButtonProcess");
_CheckButtonProcess -> SetGridConstraints(0, 0, 1, 1, CATGRID_4SIDES);
 _CheckButtonParts = new CATDlgCheckButton(_Frame006, "CheckButtonParts");
_CheckButtonParts -> SetGridConstraints(0, 1, 1, 1, CATGRID_4SIDES);
 _CheckButtonProcessEqui = new CATDlgCheckButton(_Frame006, "CheckButtonProcessEqui");
_CheckButtonProcessEqui -> SetGridConstraints(0, 2, 1, 1, CATGRID_4SIDES);
 _Frame007 = new CATDlgFrame(this, "Frame007", CATDlgFraNoFrame|CATDlgGridLayout);
_Frame007 -> SetGridConstraints(1, 0, 1, 1, CATGRID_4SIDES);
 _Frame007 -> SetGridColumnResizable(0,1);
 _EditorAddress = new CATDlgEditor(_Frame007, "EditorAddress");
_EditorAddress -> SetGridConstraints(0, 0, 1, 1, CATGRID_4SIDES);
 _PushButtonBrowser = new CATDlgPushButton(_Frame007, "PushButtonBrowser");
_PushButtonBrowser -> SetGridConstraints(0, 1, 1, 1, CATGRID_4SIDES);
//END CAA2 WIZARD WIDGET CONSTRUCTION SECTION
CATDlgWindow *pFrmWindow = NULL;
pFrmWindow = (CATApplicationFrame::GetApplicationFrame())->GetApplicationDocument();
DRECT rect;
pFrmWindow->GetRectDimensions(&rect);
int width = 200;
int height = 120;
this->SetRectDimensions((rect.dx-width)/2,(rect.dy-height)/2,height,width);

//END CAA2 WIZARD WIDGET CONSTRUCTION SECTION


//END CAA2 WIZARD WIDGET CONSTRUCTION SECTION

//CAA2 WIZARD CALLBACK DECLARATION SECTION
     AddAnalyseNotificationCB (_CheckButtonProcessEqui, 
                               _CheckButtonProcessEqui->GetChkBModifyNotification(),
                               (CATCommandMethod)&CDlgOutputFile::OnCheckButtonProcessEquiChkBModifyNotification,
                               NULL);
     AddAnalyseNotificationCB (_CheckButtonParts, 
                               _CheckButtonParts->GetChkBModifyNotification(),
                               (CATCommandMethod)&CDlgOutputFile::OnCheckButtonPartsChkBModifyNotification,
                               NULL);
     AddAnalyseNotificationCB (_CheckButtonProcess, 
                               _CheckButtonProcess->GetChkBModifyNotification(),
                               (CATCommandMethod)&CDlgOutputFile::OnCheckButtonProcessChkBModifyNotification,
                               NULL);
     AddAnalyseNotificationCB (_PushButtonBrowser, 
                               _PushButtonBrowser->GetPushBActivateNotification(),
                               (CATCommandMethod)&CDlgOutputFile::OnPushButtonBrowserPushBActivateNotification,
                               NULL);
     AddAnalyseNotificationCB (this, 
                               GetDiaOKNotification(),
                               (CATCommandMethod)&CDlgOutputFile::OnCDlgOutputFileDiaOKNotification,
                               NULL);
//END CAA2 WIZARD CALLBACK DECLARATION SECTION

}

CATBoolean CDlgOutputFile::OutputHtml()
{
	CATProcessFile *pProcessFile = CATProcessFile::GetInstance();
	CATUnicodeString str;
	_EditorAddress->GetLine(str,0);
	CStdioFile ReportFile(pProcessFile->ConvertToCString(str), CFile::modeCreate|CFile::modeWrite);
	CString  strTemp;
	char* old_locale = _strdup( setlocale(LC_CTYPE,NULL) );
	setlocale( LC_CTYPE, "chs" );//设定

	ReportFile.WriteString(L"<HTML>\n");
	ReportFile.WriteString(L"<HEAD>\n");
	ReportFile.WriteString(L"<BODY BGCOLOR=\"#FFFFFF\">\n");
	ReportFile.WriteString(L"<HEAD>\n");

	ReportFile.WriteString(L"<BODY>\n");
	ReportFile.WriteString(L"<h2><div align=center>三维工艺<center></div>");// 标题
	ReportFile.WriteString(L"<hr>");

	ReportFile.WriteString(L"<H3><div align=center>");
	ReportFile.WriteString(L"<P> 工序列表：");
	ReportFile.WriteString(L"<P>");

	ReportFile.WriteString(L"<table border>");
	ReportFile.WriteString(L"<thead>");
	ReportFile.WriteString(L"<th>工序号</th>");
	ReportFile.WriteString(L"<th>工序名称</th>");
	ReportFile.WriteString(L"<th>工序内容</th>");
	ReportFile.WriteString(L"<th>辅助材料</th>");
	ReportFile.WriteString(L"<th>装配资源</th>");
	ReportFile.WriteString(L"</thead>");
	ReportFile.WriteString(L"<tbody>");

	for (int i=0; i<PPRProcessArray.GetSize(); i++)
	{
		ReportFile.WriteString(L"<tr>");
		ReportFile.WriteString(L"<td align=\"center\">");
		ReportFile.WriteString(pProcessFile->ConvertToCString(PPRProcessArray.GetAt(i)->ProcessNum));
		ReportFile.WriteString(L"</td>");

		ReportFile.WriteString(L"<td align=\"center\">");
		ReportFile.WriteString(pProcessFile->ConvertToCString(PPRProcessArray.GetAt(i)->ProcessName));
		ReportFile.WriteString(L"</td>");

		ReportFile.WriteString(L"<td align=\"center\">");
		ReportFile.WriteString(pProcessFile->ConvertToCString(PPRProcessArray.GetAt(i)->ProcessContent));
		ReportFile.WriteString(L"</td>");
		ReportFile.WriteString(L"</tr>");
	}

	return TRUE;
}

//-------------------------------------------------------------------------
// Callback on DiaOK of _CDlgOutputFile
//-------------------------------------------------------------------------
void CDlgOutputFile::OnCDlgOutputFileDiaOKNotification(CATCommand* cmd, CATNotification* evt, CATCommandClientData data)
{
  // Add your code here
	CATProcessFile *pProcessFile = CATProcessFile::GetInstance();
	CATUnicodeString str;
	_EditorAddress->GetLine(str,0);
	if (pProcessFile->ConvertToCString(str) == _T(""))
	{
		AfxMessageBox(_T("请先选择保存目录！"));
		return;
	}
	if (m_bProcess == true)
	{
		//获取保存的工艺信息
		pProcessFile->ParseProcessInfo();
		if (pProcessFile->PPRProcessArray.GetSize() == 0)
		{
			AfxMessageBox(_T("请先设置工序属性信息！"));
			return;
		}
		PPRProcessArray.Copy(pProcessFile->PPRProcessArray);
		OutputHtml();
	}
}

//-------------------------------------------------------------------------
// Callback on PushBActivate of _PushButtonBrowser
//-------------------------------------------------------------------------
void CDlgOutputFile::OnPushButtonBrowserPushBActivateNotification(CATCommand* cmd, CATNotification* evt, CATCommandClientData data)
{
  // Add your code here
	CATFile* pFile = CATFile::GetInstance();
	CString strOutputPath = pFile->OpenOneFileAndName();
	_EditorAddress->SetLine(pFile->ConvertToCATString(strOutputPath));
}

//-------------------------------------------------------------------------
// Callback on ChkBModify of _CheckButtonProcess
//-------------------------------------------------------------------------
void CDlgOutputFile::OnCheckButtonProcessChkBModifyNotification(CATCommand* cmd, CATNotification* evt, CATCommandClientData data)
{
  // Add your code here
	if (_CheckButtonProcess->GetState() == CATDlgCheck)
	{
		m_bProcess = true;
	}
	else
	{
		m_bProcess = false;
	}
}


//-------------------------------------------------------------------------
// Callback on ChkBModify of _CheckButtonParts
//-------------------------------------------------------------------------
void CDlgOutputFile::OnCheckButtonPartsChkBModifyNotification(CATCommand* cmd, CATNotification* evt, CATCommandClientData data)
{
  // Add your code here
	if (_CheckButtonParts->GetState() == CATDlgCheck)
	{
		m_bParts = true;
	}
	else
	{
		m_bParts = false;
	}
}


//-------------------------------------------------------------------------
// Callback on ChkBModify of _CheckButtonProcessEqui
//-------------------------------------------------------------------------
void CDlgOutputFile::OnCheckButtonProcessEquiChkBModifyNotification(CATCommand* cmd, CATNotification* evt, CATCommandClientData data)
{
  // Add your code here
	if (_CheckButtonProcessEqui->GetState() == CATDlgCheck)
	{
		m_bProcessEqui = true;
	}
	else
	{
		m_bProcessEqui = false;
	}
}

