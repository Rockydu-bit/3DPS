// COPYRIGHT Dassault Systemes 2015
//===================================================================
//
// CDlgOpenFile.cpp
// The dialog : CDlgOpenFile
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//
//  Oct 2015  Creation: Code generated by the CAA wizard  WANGJIAPENG
//===================================================================
#include "CDlgOpenFile.h"
#include "CATApplicationFrame.h"
#include "CATDlgGridConstraints.h"
#include "CATMsgCatalog.h"
#ifdef CDlgOpenFile_ParameterEditorInclude
#include "CATIParameterEditorFactory.h"
#include "CATIParameterEditor.h"
#include "CATICkeParm.h"
#endif




//-------------------------------------------------------------------------
// Constructor
//-------------------------------------------------------------------------
CDlgOpenFile::CDlgOpenFile() :
  CATDlgDialog ((CATApplicationFrame::GetApplicationFrame())->GetMainWindow(),
//CAA2 WIZARD CONSTRUCTOR DECLARATION SECTION
"CDlgOpenFile",CATDlgWndModal|CATDlgWndBtnOKCancel|CATDlgGridLayout
//END CAA2 WIZARD CONSTRUCTOR DECLARATION SECTION
                               )
{
//CAA2 WIZARD CONSTRUCTOR INITIALIZATION SECTION
 _EditorOpenFolder = NULL;
 _PushButtonOpenFolder = NULL;
 _FrameHistory = NULL;
 _ComboHistory = NULL;
//END CAA2 WIZARD CONSTRUCTOR INITIALIZATION SECTION
 pStringObject = CATStringObject::GetInstance();
}

//-------------------------------------------------------------------------
// Destructor
//-------------------------------------------------------------------------
CDlgOpenFile::~CDlgOpenFile()
{
//  Do not delete the control elements of your dialog: 
//     this is done automatically
//  --------------------------------------------------
//CAA2 WIZARD DESTRUCTOR DECLARATION SECTION
 _EditorOpenFolder = NULL;
 _PushButtonOpenFolder = NULL;
 _FrameHistory = NULL;
 _ComboHistory = NULL;
//END CAA2 WIZARD DESTRUCTOR DECLARATION SECTION
}



void CDlgOpenFile::Build()
{
//  TODO: This call builds your dialog from the layout declaration file
//  -------------------------------------------------------------------

//CAA2 WIZARD WIDGET CONSTRUCTION SECTION
 SetGridColumnResizable(0,1);
 SetGridColumnResizable(1,1);
 _EditorOpenFolder = new CATDlgEditor(this, "EditorOpenFolder");
_EditorOpenFolder -> SetGridConstraints(0, 0, 1, 1, CATGRID_4SIDES);
 _PushButtonOpenFolder = new CATDlgPushButton(this, "PushButtonOpenFolder");
_PushButtonOpenFolder -> SetGridConstraints(0, 1, 1, 1, CATGRID_4SIDES);
 _FrameHistory = new CATDlgFrame(this, "FrameHistory", CATDlgGridLayout);
_FrameHistory -> SetGridConstraints(1, 0, 2, 1, CATGRID_4SIDES);
 _FrameHistory -> SetGridColumnResizable(0,1);
 _ComboHistory = new CATDlgCombo(_FrameHistory, "ComboHistory", CATDlgCmbDropDown);
_ComboHistory -> SetGridConstraints(0, 0, 1, 1, CATGRID_4SIDES);
//END CAA2 WIZARD WIDGET CONSTRUCTION SECTION
GetFolderPath();
//CAA2 WIZARD CALLBACK DECLARATION SECTION
     AddAnalyseNotificationCB (_PushButtonOpenFolder, 
                               _PushButtonOpenFolder->GetPushBActivateNotification(),
                               (CATCommandMethod)&CDlgOpenFile::OnPushButtonOpenFolderPushBActivateNotification,
                               NULL);
//END CAA2 WIZARD CALLBACK DECLARATION SECTION
//修改窗体位置和大小
CATDlgWindow *pFrmWindow = NULL;
pFrmWindow = (CATApplicationFrame::GetApplicationFrame())->GetApplicationDocument();
DRECT rect;
pFrmWindow->GetRectDimensions(&rect);
int width = 500;
int height = 120;
this->SetRectDimensions((rect.dx-width)/2,(rect.dy-height)/2,height,width);
}

CATBoolean CDlgOpenFile::GetFolderPath()
{
	ProcessFolderArray.RemoveAll();
	_ComboHistory->ClearLine();
	CString strContent;
	CString strPath = pStringObject->GetProgramPath();
	strPath = strPath + _T("\\Settings.txt");
	CStdioFile fifFile(strPath,CFile::modeRead);
	fifFile.ReadString(strContent);
	fifFile.ReadString(strContent);
	if (strContent == _T(""))
	{
		fifFile.Close();
		return FALSE;
	}
	else
	{
		int num = _ttoi(strContent);
		for (int i=0; i<num; i++)
		{
			fifFile.ReadString(strContent);
			if (!PathIsDirectory(strContent))
			{
				continue;
			}
			_ComboHistory->SetLine(pStringObject->ConvertToCATString(strContent),i);
			ProcessFolderArray.Add(strContent);
		}
	}
	fifFile.Close();

	return TRUE;
}

CATBoolean CDlgOpenFile::SetCurrentActivePath()
{
	CString strPath = pStringObject->GetProgramPath();
	strPath = strPath + _T("\\Settings.txt");
	CStdioFile fifFile(strPath,CFile::modeCreate|CFile::modeReadWrite);
	CString strContent;
	CATUnicodeString string;

	if (strOpenPath == _T(""))
	{
		int no = _ComboHistory->GetSelect();
		_ComboHistory->GetLine(string,no);
		wchar_t charTmp[100] = {0};
		string.ConvertToWChar(charTmp);
		strContent.Format(_T("%s"),charTmp);
		fifFile.WriteString(strContent);
		fifFile.WriteString(_T("\n"));
		int num = ProcessFolderArray.GetSize();
		strContent.Format(_T("%d"),num);
		fifFile.WriteString(strContent);
		fifFile.WriteString(_T("\n"));
		for (int i=0; i<ProcessFolderArray.GetSize(); i++)
		{
			fifFile.WriteString(ProcessFolderArray.GetAt(i));
			fifFile.WriteString(_T("\n"));
		}
	}
	else
	{
		if (!pStringObject->CheckStringExist(strOpenPath,ProcessFolderArray))
		{
			ProcessFolderArray.Add(strOpenPath);
		}
		fifFile.WriteString(strOpenPath);
		fifFile.WriteString(_T("\n"));
		int num = ProcessFolderArray.GetSize();
		strContent.Format(_T("%d"),num);
		fifFile.WriteString(strContent);
		fifFile.WriteString(_T("\n"));
		for (int i=0; i<ProcessFolderArray.GetSize(); i++)
		{
			fifFile.WriteString(ProcessFolderArray.GetAt(i));
			fifFile.WriteString(_T("\n"));
		}
	}
	fifFile.Close();

	return TRUE;
}

CATBoolean CDlgOpenFile::CheckFolderPath()
{
	CString string;
	if (strOpenPath != _T(""))
	{
		string = strOpenPath + _T("\\Picture");
		if (!PathIsDirectory(string))
		{
			AfxMessageBox(_T("当前工作目录下无“\\Picture”！"));
			return FALSE;
		}
		string = strOpenPath + _T("\\Excel");
		if (!PathIsDirectory(string))
		{
			AfxMessageBox(_T("当前工作目录下无“\\Excel”！"));
			return FALSE;
		}
		string = strOpenPath + _T("\\Html");
		if (!PathIsDirectory(string))
		{
			AfxMessageBox(_T("当前工作目录下无“\\Html”！"));
			return FALSE;
		}
		string = strOpenPath + _T("\\Video");
		if (!PathIsDirectory(string))
		{
			AfxMessageBox(_T("当前工作目录下无“\\Video”！"));
			return FALSE;
		}
		string = strOpenPath + _T("\\Model");
		if (!PathIsDirectory(string))
		{
			AfxMessageBox(_T("当前工作目录下无“\\Model”！"));
			return FALSE;
		}
		string = strOpenPath + _T("\\DMPlayer");
		if (!PathIsDirectory(string))
		{
			AfxMessageBox(_T("当前工作目录下无“\\DMPlayer”！"));
			return FALSE;
		}
		string = strOpenPath + _T("\\DMPlayer") + _T("\\DMPlayer.exe");
		if (!PathFileExists(string))
		{
			AfxMessageBox(_T("当前工作目录下无“\\DMPlayer.exe”！"));
			return FALSE;
		}
		string = strOpenPath + _T("\\DMPlayer") + _T("\\Settings.ini");
		if (!PathFileExists(string))
		{
			AfxMessageBox(_T("当前工作目录下无“\\Settings.ini”！"));
			return FALSE;
		}
	}

	return TRUE;
}

//-------------------------------------------------------------------------
// Callback on PushBActivate of _PushButtonOpenFolder
//-------------------------------------------------------------------------
void CDlgOpenFile::OnPushButtonOpenFolderPushBActivateNotification(CATCommand* cmd, CATNotification* evt, CATCommandClientData data)
{
  // Add your code here
	CATFile* pFile = CATFile::GetInstance();
	strOpenPath = pFile->OpenOneFolder();
	if (!CheckFolderPath())
	{
		AfxMessageBox(_T("请选择正确的工艺规划！"));
		strOpenPath = _T("");
		return;
	}
	_EditorOpenFolder->SetLine(pStringObject->ConvertToCATString(strOpenPath));
}

