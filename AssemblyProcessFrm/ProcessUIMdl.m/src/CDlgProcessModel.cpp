// COPYRIGHT Dassault Systemes 2015
//===================================================================
//
// CDlgProcessModel.cpp
// The dialog : CDlgProcessModel
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//
//  Oct 2015  Creation: Code generated by the CAA wizard  WANGJIAPENG
//===================================================================
#include "CDlgProcessModel.h"
#include "CATApplicationFrame.h"
#include "CATDlgGridConstraints.h"
#include "CATMsgCatalog.h"
#include "CATProcessFile.h"
#include "CATModelGenerator.h"
#include "CDlgModelViewer.h"
#include "CDlgFigureReview.h"

#ifdef CDlgProcessModel_ParameterEditorInclude
#include "CATIParameterEditorFactory.h"
#include "CATIParameterEditor.h"
#include "CATICkeParm.h"
#endif



CDlgProcessModel* CDlgProcessModel::m_pDlgProcessModel = NULL;
//-------------------------------------------------------------------------
// Constructor
//-------------------------------------------------------------------------
CDlgProcessModel::CDlgProcessModel() :
  CATDlgDialog ((CATApplicationFrame::GetApplicationFrame())->GetMainWindow(),
//CAA2 WIZARD CONSTRUCTOR DECLARATION SECTION
"CDlgProcessModel",CATDlgWndBtnOKCancel|CATDlgGridLayout
//END CAA2 WIZARD CONSTRUCTOR DECLARATION SECTION
                               )
{
//CAA2 WIZARD CONSTRUCTOR INITIALIZATION SECTION
 _Frame100 = NULL;
 _FrameBOMTree = NULL;
 _Label015 = NULL;
 _TabContainer002 = NULL;
 _TabPageProcess = NULL;
 _FrameContent = NULL;
 _EditorContent = NULL;
 _FrameRemark = NULL;
 _EditorRemark = NULL;
 _Frame104 = NULL;
 _LabelNum = NULL;
 _EditorNum = NULL;
 _LabelName = NULL;
 _EditorName = NULL;
 _Frame108 = NULL;
 _LabelBeginTime = NULL;
 _EditorBeginTime = NULL;
 _LabelEndTime = NULL;
 _EditorEndTime = NULL;
 _TabPageCheck = NULL;
 _FrameCheckContent = NULL;
 _EditorCheckContent = NULL;
 _FrameCheckResult = NULL;
 _EditorCheckResult = NULL;
 _Frame103 = NULL;
 _PushButtonSaveModel = NULL;
 _PushButtonSaveFigure = NULL;
 _PushButtonReview = NULL;
 _PushButtonFigure = NULL;
//END CAA2 WIZARD CONSTRUCTOR INITIALIZATION SECTION
 m_nCurrentNum = -1;
 pPPRProcess = new CATPPRProcess();
 int layer = 0;
 pPPRProcess->GetPPRRootPointer(pPPRProcess->GetCurrentDocument());
 pPPRProcess->GetPPRNodeInfo(pPPRProcess->FirstLayerActivity,layer);
 ProcessNodeArray.Copy(pPPRProcess->ProcessNodeArray);
 //获取保存的工艺信息
 CATProcessFile *pProcessFile = CATProcessFile::GetInstance();
 pProcessFile->ParseProcessInfo();
 PPRProcessArray.Copy(pProcessFile->PPRProcessArray);
}

//-------------------------------------------------------------------------
// Destructor
//-------------------------------------------------------------------------
CDlgProcessModel::~CDlgProcessModel()
{
//  Do not delete the control elements of your dialog: 
//     this is done automatically
//  --------------------------------------------------
//CAA2 WIZARD DESTRUCTOR DECLARATION SECTION
 _Frame100 = NULL;
 _FrameBOMTree = NULL;
 _Label015 = NULL;
 _TabContainer002 = NULL;
 _TabPageProcess = NULL;
 _FrameContent = NULL;
 _EditorContent = NULL;
 _FrameRemark = NULL;
 _EditorRemark = NULL;
 _Frame104 = NULL;
 _LabelNum = NULL;
 _EditorNum = NULL;
 _LabelName = NULL;
 _EditorName = NULL;
 _Frame108 = NULL;
 _LabelBeginTime = NULL;
 _EditorBeginTime = NULL;
 _LabelEndTime = NULL;
 _EditorEndTime = NULL;
 _TabPageCheck = NULL;
 _FrameCheckContent = NULL;
 _EditorCheckContent = NULL;
 _FrameCheckResult = NULL;
 _EditorCheckResult = NULL;
 _Frame103 = NULL;
 _PushButtonSaveModel = NULL;
 _PushButtonSaveFigure = NULL;
 _PushButtonReview = NULL;
 _PushButtonFigure = NULL;
//END CAA2 WIZARD DESTRUCTOR DECLARATION SECTION
 if (pTreeCtrl)
 {
	 delete pTreeCtrl;
	 pTreeCtrl = NULL;
 }
 if (pPPRProcess)
 {
	 delete pPPRProcess;
	 pPPRProcess = NULL;
 }
}

CDlgProcessModel* CDlgProcessModel::GetInstance()
{
	if (m_pDlgProcessModel == NULL)
	{
		m_pDlgProcessModel = new CDlgProcessModel();
	}
	return m_pDlgProcessModel;
}

void CDlgProcessModel::Build()
{
//  TODO: This call builds your dialog from the layout declaration file
//  -------------------------------------------------------------------

//CAA2 WIZARD WIDGET CONSTRUCTION SECTION
 SetGridRowResizable(0,1);
 SetGridColumnResizable(0,1);
 SetGridColumnResizable(1,1);
 _Frame100 = new CATDlgFrame(this, "Frame100", CATDlgFraNoFrame|CATDlgGridLayout);
_Frame100 -> SetGridConstraints(0, 0, 1, 1, CATGRID_4SIDES);
 _Frame100 -> SetGridRowResizable(1,1);
 _Frame100 -> SetGridColumnResizable(0,1);
 _FrameBOMTree = new CATDlgFrame(_Frame100, "FrameBOMTree", CATDlgGridLayout);
_FrameBOMTree -> SetGridConstraints(1, 0, 1, 1, CATGRID_4SIDES);
 _Label015 = new CATDlgLabel(_Frame100, "Label015");
_Label015 -> SetGridConstraints(0, 0, 1, 1, CATGRID_4SIDES);
 _TabContainer002 = new CATDlgTabContainer(this, "TabContainer002");
_TabContainer002 -> SetGridConstraints(0, 1, 1, 1, CATGRID_4SIDES);
 _TabPageProcess = new CATDlgTabPage(_TabContainer002, "TabPageProcess", CATDlgGridLayout);
 _TabPageProcess -> SetGridRowResizable(2,1);
 _TabPageProcess -> SetGridRowResizable(3,1);
 _TabPageProcess -> SetGridColumnResizable(0,1);
 _FrameContent = new CATDlgFrame(_TabPageProcess, "FrameContent", CATDlgGridLayout);
_FrameContent -> SetGridConstraints(2, 0, 1, 1, CATGRID_4SIDES);
 _FrameContent -> SetGridRowResizable(0,1);
 _FrameContent -> SetGridColumnResizable(0,1);
 _EditorContent = new CATDlgEditor(_FrameContent, "EditorContent", CATDlgEdtMultiline);
_EditorContent -> SetGridConstraints(0, 0, 1, 1, CATGRID_4SIDES);
 _FrameRemark = new CATDlgFrame(_TabPageProcess, "FrameRemark", CATDlgGridLayout);
_FrameRemark -> SetGridConstraints(3, 0, 1, 1, CATGRID_4SIDES);
 _FrameRemark -> SetGridRowResizable(0,1);
 _FrameRemark -> SetGridColumnResizable(0,1);
 _EditorRemark = new CATDlgEditor(_FrameRemark, "EditorRemark", CATDlgEdtMultiline);
_EditorRemark -> SetGridConstraints(0, 0, 1, 1, CATGRID_4SIDES);
 _Frame104 = new CATDlgFrame(_TabPageProcess, "Frame104", CATDlgFraNoFrame|CATDlgGridLayout);
_Frame104 -> SetGridConstraints(0, 0, 1, 1, CATGRID_4SIDES);
 _Frame104 -> SetGridColumnResizable(3,1);
 _LabelNum = new CATDlgLabel(_Frame104, "LabelNum");
_LabelNum -> SetGridConstraints(0, 0, 1, 1, CATGRID_4SIDES);
 _EditorNum = new CATDlgEditor(_Frame104, "EditorNum", CATDlgEdtReadOnly);
_EditorNum -> SetGridConstraints(0, 1, 1, 1, CATGRID_4SIDES);
 _LabelName = new CATDlgLabel(_Frame104, "LabelName");
_LabelName -> SetGridConstraints(0, 2, 1, 1, CATGRID_4SIDES);
 _EditorName = new CATDlgEditor(_Frame104, "EditorName");
_EditorName -> SetGridConstraints(0, 3, 1, 1, CATGRID_4SIDES);
 _Frame108 = new CATDlgFrame(_TabPageProcess, "Frame108", CATDlgFraNoFrame|CATDlgGridLayout);
_Frame108 -> SetGridConstraints(1, 0, 1, 1, CATGRID_4SIDES);
 _Frame108 -> SetGridColumnResizable(3,1);
 _LabelBeginTime = new CATDlgLabel(_Frame108, "LabelBeginTime");
_LabelBeginTime -> SetGridConstraints(0, 0, 1, 1, CATGRID_4SIDES);
 _EditorBeginTime = new CATDlgEditor(_Frame108, "EditorBeginTime");
_EditorBeginTime -> SetGridConstraints(0, 1, 1, 1, CATGRID_4SIDES);
 _LabelEndTime = new CATDlgLabel(_Frame108, "LabelEndTime");
_LabelEndTime -> SetGridConstraints(0, 2, 1, 1, CATGRID_4SIDES);
 _EditorEndTime = new CATDlgEditor(_Frame108, "EditorEndTime");
_EditorEndTime -> SetGridConstraints(0, 3, 1, 1, CATGRID_4SIDES);
 _TabPageCheck = new CATDlgTabPage(_TabContainer002, "TabPageCheck", CATDlgGridLayout);
 _TabPageCheck -> SetGridRowResizable(0,1);
 _TabPageCheck -> SetGridRowResizable(1,1);
 _TabPageCheck -> SetGridColumnResizable(0,1);
 _FrameCheckContent = new CATDlgFrame(_TabPageCheck, "FrameCheckContent", CATDlgGridLayout);
_FrameCheckContent -> SetGridConstraints(0, 0, 1, 1, CATGRID_4SIDES);
 _FrameCheckContent -> SetGridRowResizable(0,1);
 _FrameCheckContent -> SetGridColumnResizable(0,1);
 _EditorCheckContent = new CATDlgEditor(_FrameCheckContent, "EditorCheckContent", CATDlgEdtMultiline);
_EditorCheckContent -> SetGridConstraints(0, 0, 1, 1, CATGRID_4SIDES);
 _FrameCheckResult = new CATDlgFrame(_TabPageCheck, "FrameCheckResult", CATDlgGridLayout);
_FrameCheckResult -> SetGridConstraints(1, 0, 1, 1, CATGRID_4SIDES);
 _FrameCheckResult -> SetGridRowResizable(0,1);
 _FrameCheckResult -> SetGridColumnResizable(0,1);
 _EditorCheckResult = new CATDlgEditor(_FrameCheckResult, "EditorCheckResult", CATDlgEdtMultiline);
_EditorCheckResult -> SetGridConstraints(0, 0, 1, 1, CATGRID_4SIDES);
 _Frame103 = new CATDlgFrame(this, "Frame103", CATDlgFraNoFrame|CATDlgGridLayout);
_Frame103 -> SetGridConstraints(1, 1, 1, 1, CATGRID_4SIDES);
 _PushButtonSaveModel = new CATDlgPushButton(_Frame103, "PushButtonSaveModel");
_PushButtonSaveModel -> SetGridConstraints(0, 0, 1, 1, CATGRID_4SIDES);
 _PushButtonSaveFigure = new CATDlgPushButton(_Frame103, "PushButtonSaveFigure");
_PushButtonSaveFigure -> SetGridConstraints(0, 2, 1, 1, CATGRID_4SIDES);
 _PushButtonReview = new CATDlgPushButton(_Frame103, "PushButtonReview");
_PushButtonReview -> SetGridConstraints(0, 1, 1, 1, CATGRID_4SIDES);
 _PushButtonFigure = new CATDlgPushButton(_Frame103, "PushButtonFigure");
_PushButtonFigure -> SetGridConstraints(0, 3, 1, 1, CATGRID_4SIDES);
//END CAA2 WIZARD WIDGET CONSTRUCTION SECTION
CATDlgWindow *pFrmWindow = NULL;
pFrmWindow = (CATApplicationFrame::GetApplicationFrame())->GetApplicationDocument();
DRECT rect;
pFrmWindow->GetRectDimensions(&rect);
int width = 600;
int height = 400;
this->SetRectDimensions((rect.dx-width)/2,(rect.dy-height)/2,height,width);
//生成BOM树
GenerateBOMTree(_FrameBOMTree,ProcessNodeArray);
//CAA2 WIZARD CALLBACK DECLARATION SECTION
     AddAnalyseNotificationCB (this, 
                               GetDiaOKNotification(),
                               (CATCommandMethod)&CDlgProcessModel::OnCDlgProcessModelDiaOKNotification,
                               NULL);
     AddAnalyseNotificationCB (_PushButtonFigure, 
                               _PushButtonFigure->GetPushBActivateNotification(),
                               (CATCommandMethod)&CDlgProcessModel::OnPushButtonFigurePushBActivateNotification,
                               NULL);
     AddAnalyseNotificationCB (_PushButtonReview, 
                               _PushButtonReview->GetPushBActivateNotification(),
                               (CATCommandMethod)&CDlgProcessModel::OnPushButtonReviewPushBActivateNotification,
                               NULL);
     AddAnalyseNotificationCB (_PushButtonSaveFigure, 
                               _PushButtonSaveFigure->GetPushBActivateNotification(),
                               (CATCommandMethod)&CDlgProcessModel::OnPushButtonSaveFigurePushBActivateNotification,
                               NULL);
     AddAnalyseNotificationCB (_PushButtonSaveModel, 
                               _PushButtonSaveModel->GetPushBActivateNotification(),
                               (CATCommandMethod)&CDlgProcessModel::OnPushButtonSaveModelPushBActivateNotification,
                               NULL);
//END CAA2 WIZARD CALLBACK DECLARATION SECTION
}

void CDlgProcessModel::InitDialogBox()
{
	_EditorName->ClearLine();
	_EditorContent->ClearLine();
	_EditorRemark->ClearLine();
	_EditorNum->ClearLine();
	_EditorCheckContent->ClearLine();
	_EditorCheckResult->ClearLine();
}

CATBoolean CDlgProcessModel::InitLayerArray()
{
	int layer = pPPRProcess->GetLayerCount(ProcessNodeArray);
	if (layer == 0)
	{
		return FALSE;
	}
	LayerArray.RemoveAll();
	for (int i=1; i<=layer; i++)
	{
		LayerArray.Add(1);
	}

	return TRUE;
}

CATBoolean CDlgProcessModel::GenerateBOMTree(CATDlgFrame* frame,CArray<ProcessNode*,ProcessNode*>& ProcessNodeArray)
{
	if (ProcessNodeArray.GetSize() == 0)
	{
		return FALSE;
	}
	InitLayerArray();
	frame->SetGridRowResizable(0,1);
	frame->SetGridColumnResizable(0,1);
	pTreeCtrl = new CAATreeCtrl(frame,"TreeCtrl");
	pTreeCtrl->SetGridConstraints(0,0,1,1,CATGRID_4SIDES);
	pTreeCtrl->AddRootTreeNode(pPPRProcess->ConvertToCATString(ProcessNodeArray.GetAt(0)->ProcessNum+_T(".")+ProcessNodeArray.GetAt(0)->ProcessName),"");
	CATBaseUnknown *pTreeNode = NULL;
	pTreeCtrl->GetRootTreeNodeAt(1,&pTreeNode);
	CString strNameAndNum;
	for (int i=1; i<ProcessNodeArray.GetSize(); i++)
	{
		if (ProcessNodeArray.GetAt(i)->layer == 1)
		{
			strNameAndNum.Format(_T("%d"),LayerArray.GetAt(0));
			ProcessNodeArray.GetAt(i)->ProcessStep = strNameAndNum;
			strNameAndNum = strNameAndNum + _T(".") + ProcessNodeArray.GetAt(i)->ProcessName;
			pTreeCtrl->AddChildTreeNode(pTreeNode,pPPRProcess->ConvertToCATString(strNameAndNum),"");
			LayerArray.GetAt(ProcessNodeArray.GetAt(i)->layer-1) = LayerArray.GetAt(ProcessNodeArray.GetAt(i)->layer-1) + 1;
		}
	}
	//设置第一个为选中状态
	int iTreeNodeRank = 1;
	CATBaseUnknown *opTreeNodeObject = new CATBaseUnknown();
	pTreeCtrl->GetRootTreeNodeAt(iTreeNodeRank,&opTreeNodeObject);
	pTreeCtrl->SelectTreeNode(opTreeNodeObject);
	AddCallback(pTreeCtrl,TreeNodeSelectNotif::ClassName(),(CATSubscriberMethod)&CDlgProcessModel::OnTreeNodeSelect,NULL);

	return TRUE;
}

void CDlgProcessModel::OnTreeNodeSelect(CATCallbackEvent event, void * client, CATNotification * iNotification, CATSubscriberData data, 
									  CATCallback callback)
{
	CATBaseUnknown * pTreeNode = NULL;
	pTreeCtrl -> GetSelectedTreeNode(&pTreeNode);
	pTreeCtrl -> GetCertainRootTreeNodeLocate(m_NodeLocate,pTreeNode);
	CATUnicodeString strName;
	pTreeCtrl->GetTreeNodeText(pTreeNode,strName);
	strNameAndNum = pPPRProcess->ConvertToCString(strName);
	CATUnicodeString strLocate;
	strLocate.BuildFromNum(m_NodeLocate);
	SetFocusOn(pTreeCtrl);
	if (strNameAndNum.GetAt(0) != '0')
	{
		GetProcessContent(GetEditorContent(_EditorContent));
		m_nCurrentNum = GetSelectedProcessNode(strNameAndNum);
		SetDialogContent(m_nCurrentNum);
	}
}

int CDlgProcessModel::GetSelectedProcessNode(CString strNode)
{
	CString strtemp;
	int start = 0;
	int end = strNode.Find(_T("."));
	strtemp = strNode.Mid(start,end);
	for (int i=0; i<ProcessNodeArray.GetSize(); i++)
	{
		if (strtemp == ProcessNodeArray.GetAt(i)->ProcessStep)
		{
			return i;
		}
	}

	return -1;
}

CATBoolean CDlgProcessModel::SetDialogContent(int Num)
{
	InitDialogBox();
	if (Num == -1)
	{
		return FALSE;
	}
	if (Num >= ProcessNodeArray.GetSize())
	{
		return FALSE;
	}
	CATUnicodeString strTime;
	_EditorNum->SetLine(pPPRProcess->ConvertToCATString(ProcessNodeArray.GetAt(Num)->ProcessStep),0);
	_EditorName->SetLine(pPPRProcess->ConvertToCATString(ProcessNodeArray.GetAt(Num)->ProcessName),0);
	CString strPartName = _T("");
	strTime.BuildFromNum(ProcessNodeArray.GetAt(Num)->beginTime);
	_EditorBeginTime->SetLine(strTime,0);
	strTime.BuildFromNum(ProcessNodeArray.GetAt(Num)->endTime);
	_EditorEndTime->SetLine(strTime,0);
	GetOtherContent(pPPRProcess->ConvertToCATString(ProcessNodeArray.GetAt(Num)->ProcessStep));

	return TRUE;
}

CATUnicodeString CDlgProcessModel::GetEditorContent(CATDlgEditor* _Editor)
{
	CATUnicodeString content("");
	CATUnicodeString linecontent("");
	int count = _Editor->GetLineCount();
	for (int i=0; i<count; i++)
	{
		_Editor->GetLine(linecontent,i);
		content = content + linecontent;
	}

	return content;
}

CString CDlgProcessModel::GetArrayContent(CArray<CString,CString>& ProcessItemArray)
{
	if (ProcessItemArray.IsEmpty())
	{
		return _T("");
	}

	CString strContent("");
	for (int i=0; i<ProcessItemArray.GetSize(); i++)
	{
		strContent = strContent + ProcessItemArray.GetAt(i) + _T(";");
	}

	return strContent;
}

void CDlgProcessModel::GetOtherContent(CATUnicodeString strProcessStep)
{
	if (PPRProcessArray.IsEmpty())
	{
		return;
	}

	for (int i=0; i<PPRProcessArray.GetSize(); i++)
	{
		if (strProcessStep == PPRProcessArray.GetAt(i)->ProcessNum)
		{
			_EditorContent->SetLine(PPRProcessArray.GetAt(i)->ProcessContent);
			_EditorRemark->SetLine(PPRProcessArray.GetAt(i)->ProcessRemark);
			_EditorCheckContent->SetLine(PPRProcessArray.GetAt(i)->ProcessCheckContent);
			_EditorCheckResult->SetLine(PPRProcessArray.GetAt(i)->ProcessCheckResult);
			break;
		}
	}
}

CATBoolean CDlgProcessModel::GetRefreshFlag(CATUnicodeString EditorContent)
{
	CATBoolean flag = FALSE;
	int num = pPPRProcess->ConvertToInt(EditorContent);
	for (int i=0; i<PPRProcessArray.GetSize(); i++)
	{
		if (EditorContent == PPRProcessArray.GetAt(i)->ProcessNum)
		{
			PPRProcessArray.GetAt(i)->ProcessNum = GetEditorContent(_EditorNum);
			PPRProcessArray.GetAt(i)->ProcessName = GetEditorContent(_EditorName);
			PPRProcessArray.GetAt(i)->ProcessStart = GetEditorContent(_EditorBeginTime);
			PPRProcessArray.GetAt(i)->ProcessEnd = GetEditorContent(_EditorEndTime);
			PPRProcessArray.GetAt(i)->ProcessContent = GetEditorContent(_EditorContent);
			PPRProcessArray.GetAt(i)->ProcessRemark = GetEditorContent(_EditorRemark);
			PPRProcessArray.GetAt(i)->ProcessCheckContent = GetEditorContent(_EditorCheckContent);
			PPRProcessArray.GetAt(i)->ProcessCheckResult = GetEditorContent(_EditorCheckResult);
			flag = TRUE;
			break;
		}
	}
	return flag;
}

CATBoolean CDlgProcessModel::GetProcessContent(CATUnicodeString strContent)
{
	if (pPPRProcess->ConvertToCString(strContent) == _T(""))
	{
		return FALSE;
	}
	if (!GetRefreshFlag(GetEditorContent(_EditorNum)))
	{
		CATPPRProcessModel *ProcessInfo = new CATPPRProcessModel();
		ProcessInfo->ProcessNum = GetEditorContent(_EditorNum);
		ProcessInfo->ProcessName = GetEditorContent(_EditorName);
		ProcessInfo->ProcessStart = GetEditorContent(_EditorBeginTime);
		ProcessInfo->ProcessEnd = GetEditorContent(_EditorEndTime);
		ProcessInfo->ProcessContent = GetEditorContent(_EditorContent);
		ProcessInfo->ProcessRemark = GetEditorContent(_EditorRemark);
		ProcessInfo->ProcessCheckContent = GetEditorContent(_EditorCheckContent);
		ProcessInfo->ProcessCheckResult = GetEditorContent(_EditorCheckResult);
		ProcessInfo->PPRStepArray.RemoveAll();
		PPRProcessArray.Add(ProcessInfo);
	}

	return TRUE;
}

//-------------------------------------------------------------------------
// Callback on PushBActivate of _PushButtonSaveModel
//-------------------------------------------------------------------------
void CDlgProcessModel::OnPushButtonSaveModelPushBActivateNotification(CATCommand* cmd, CATNotification* evt, CATCommandClientData data)
{
  // Add your code here
	CATUnicodeString str;
	CString strProcessName;
	//获取序号
	_EditorNum->GetLine(str,0);
	strProcessName = pPPRProcess->ConvertToCString(str);
	if (strProcessName == _T(""))
	{
		AfxMessageBox(_T("请选择工序节点！"));
		return;
	}
	//获取名称
	_EditorName->GetLine(str,0);
	strProcessName = strProcessName + _T(".") + pPPRProcess->ConvertToCString(str);
	CATModelGenerator *pModelGenerator = CATModelGenerator::GetInstance();
	pModelGenerator->GenerateHSFAndCGRModel(strProcessName);
}


//-------------------------------------------------------------------------
// Callback on PushBActivate of _PushButtonSaveFigure
//-------------------------------------------------------------------------
void CDlgProcessModel::OnPushButtonSaveFigurePushBActivateNotification(CATCommand* cmd, CATNotification* evt, CATCommandClientData data)
{
  // Add your code here
	CATUnicodeString str;
	CString strProcessName;
	//获取序号
	_EditorNum->GetLine(str,0);
	strProcessName = pPPRProcess->ConvertToCString(str);
	if (strProcessName == _T(""))
	{
		AfxMessageBox(_T("请选择工序节点！"));
		return;
	}
	//获取名称
	_EditorName->GetLine(str,0);
	strProcessName = strProcessName + _T(".") + pPPRProcess->ConvertToCString(str);
	CDlgFigureReview *pFigureReview = CDlgFigureReview::GetInstance();
	pFigureReview->InterceptCurrentView(strProcessName);
}

//-------------------------------------------------------------------------
// Callback on PushBActivate of _PushButtonReview
//-------------------------------------------------------------------------
void CDlgProcessModel::OnPushButtonReviewPushBActivateNotification(CATCommand* cmd, CATNotification* evt, CATCommandClientData data)
{
  // Add your code here
	CDlgModelViewer *pModelViewer = CDlgModelViewer::GetInstance();
	CATUnicodeString str;
	CString strProcessName;
	//获取序号
	_EditorNum->GetLine(str,0);
	strProcessName = pPPRProcess->ConvertToCString(str);
	if (strProcessName == _T(""))
	{
		AfxMessageBox(_T("请选择工序节点！"));
		return;
	}
	//获取名称
	_EditorName->GetLine(str,0);
	strProcessName = strProcessName + _T(".") + pPPRProcess->ConvertToCString(str);
	pModelViewer->ProcessModelReview(strProcessName);
}

//-------------------------------------------------------------------------
// Callback on PushBActivate of _PushButtonFigure
//-------------------------------------------------------------------------
void CDlgProcessModel::OnPushButtonFigurePushBActivateNotification(CATCommand* cmd, CATNotification* evt, CATCommandClientData data)
{
  // Add your code here
	CDlgFigureReview *pFigureReview = CDlgFigureReview::GetInstance();
	CATUnicodeString str;
	CString strProcessName;
	//获取序号
	_EditorNum->GetLine(str,0);
	strProcessName = pPPRProcess->ConvertToCString(str);
	if (strProcessName == _T(""))
	{
		AfxMessageBox(_T("请选择工序节点！"));
		return;
	}
	//获取名称
	_EditorName->GetLine(str,0);
	strProcessName = strProcessName + _T(".") + pPPRProcess->ConvertToCString(str);
	pFigureReview->ProcessFigureReview(strProcessName);
}

//-------------------------------------------------------------------------
// Callback on DiaOK of _CDlgProcessModel
//-------------------------------------------------------------------------
void CDlgProcessModel::OnCDlgProcessModelDiaOKNotification(CATCommand* cmd, CATNotification* evt, CATCommandClientData data)
{
  // Add your code here
	GetProcessContent(GetEditorContent(_EditorContent));
	CATProcessFile *pProcessFile = CATProcessFile::GetInstance();
	pProcessFile->PPRProcessArray.RemoveAll();
	pProcessFile->PPRProcessArray.Copy(PPRProcessArray);
	pProcessFile->SaveProcessInfo();
}
