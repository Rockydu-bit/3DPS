// COPYRIGHT Dassault Systemes 2015
//===================================================================
//
// BITCgrConversionCmd.cpp
// The state chart based command: BITCgrConversionCmd
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//
//  Oct 2015  Creation: Code generated by the CAA wizard  WANGJIAPENG
//===================================================================
#include "BITCgrConversionCmd.h"

#include "CATCreateExternalObject.h"
CATCreateClass( BITCgrConversionCmd);


//-------------------------------------------------------------------------
// Constructor
//-------------------------------------------------------------------------
BITCgrConversionCmd::BITCgrConversionCmd() :
  CATStateCommand ("BITCgrConversionCmd", CATDlgEngOneShot, CATCommandModeExclusive) 
//  Valid states are CATDlgEngOneShot and CATDlgEngRepeat
, pOkBut(NULL), pCancelBut(NULL), pCloseBut(NULL)
{
	pDocument = new CATPPRDocument();
	pVBAScript = new CATVBAScript();
	pCgrConversion = new CDlgBITCgrConversion();
	pCgrConversion->Build();
	pCgrConversion->SetVisibility(CATDlgShow);
}

//-------------------------------------------------------------------------
// Destructor
//-------------------------------------------------------------------------
BITCgrConversionCmd::~BITCgrConversionCmd()
{
	if (pOkBut != NULL)
	{
		pOkBut->RequestDelayedDestruction();
		pOkBut = NULL;
	}
	if (pCancelBut != NULL)
	{
		pCancelBut->RequestDelayedDestruction();
		pCancelBut = NULL;
	}
	if (pCloseBut != NULL)
	{
		pCloseBut->RequestDelayedDestruction();
		pCloseBut = NULL;
	}
	if (pCgrConversion != NULL) 
	{
		pCgrConversion->RequestDelayedDestruction();
		pCgrConversion = NULL;
	}
	if (pDocument)
	{
		delete pDocument;
		pDocument = NULL;
	}
	if (pVBAScript)
	{
		delete pVBAScript;
		pVBAScript = NULL;
	}
}


//-------------------------------------------------------------------------
// BuildGraph()
//-------------------------------------------------------------------------
void BITCgrConversionCmd::BuildGraph()
{
  // TODO: Define the StateChart 
  // ---------------------------
	pOkBut = new CATDialogAgent("OK");
	pCloseBut = new CATDialogAgent("Close");
	pCancelBut = new CATDialogAgent("Cancel");

	pOkBut->AcceptOnNotify(pCgrConversion,pCgrConversion->GetDiaOKNotification());
	pCancelBut->AcceptOnNotify(pCgrConversion,pCgrConversion->GetWindCloseNotification());
	pCloseBut->AcceptOnNotify(pCgrConversion,pCgrConversion->GetDiaCANCELNotification());

	CATDialogState* pState = GetInitialState("OK");
	pState->AddDialogAgent(pOkBut);
	pState->AddDialogAgent(pCloseBut);
	pState->AddDialogAgent(pCancelBut);

	AddTransition(pState,NULL,IsOutputSetCondition(pOkBut),Action((ActionMethod)&BITCgrConversionCmd::ActionOK));
	AddTransition(pState,NULL,IsOutputSetCondition(pCloseBut),Action((ActionMethod)&BITCgrConversionCmd::ActionClose));
	AddTransition(pState,NULL,IsOutputSetCondition(pCancelBut),Action((ActionMethod)&BITCgrConversionCmd::ActionCancel));
}

CATBoolean BITCgrConversionCmd::ActionOK( void *data )
{
	// TODO: Define the action associated with the transition 
	// ------------------------------------------------------
	if (pCgrConversion->strFlag == _T("Product"))
	{
		CGRConversion();
	}
	if (pCgrConversion->strFlag == _T("Part"))
	{
		pVBAScript->SetScriptContent(pCgrConversion->PartPathArray,pCgrConversion->strCGRPath);
		pVBAScript->ExecuteCATScript("CgrConversion.catvbs");
	}
	if (pCgrConversion)
	{
		pCgrConversion->RequestDelayedDestruction();
		pCgrConversion = NULL;
	}

	return TRUE;
}

CATBoolean BITCgrConversionCmd::ActionCancel( void *data )
{
	// TODO: Define the action associated with the transition 
	// ------------------------------------------------------
	if (pCgrConversion)
	{
		pCgrConversion->RequestDelayedDestruction();
		pCgrConversion = NULL;
	}

	return TRUE;
}

CATBoolean BITCgrConversionCmd::ActionClose( void *data )
{
	// TODO: Define the action associated with the transition 
	// ------------------------------------------------------
	if (pCgrConversion)
	{
		pCgrConversion->RequestDelayedDestruction();
		pCgrConversion = NULL;
	}

	return TRUE;
}

CATBoolean BITCgrConversionCmd::CheckFolderAndFile()
{
	CString strPath = _T("C:\\Temp");
	if(!PathIsDirectory(strPath))
	{
		::CreateDirectory(strPath,NULL);
	}
	strPath = _T("C:\\Temp\\宏目录1");
	if(!PathIsDirectory(strPath))
	{
		::CreateDirectory(strPath,NULL);
	}
	strPath = _T("C:\\Temp\\宏目录1\\CgrConversion.catvbs");
	if(!PathFileExists(strPath))
	{
		CStdioFile fifFile(strPath,CFile::modeCreate);
		fifFile.Close();
	}

	return TRUE;
}

void BITCgrConversionCmd::CGRConversion()
{
	if (pCgrConversion->strCGRPath == _T(""))
	{
		AfxMessageBox(_T("请选择CGR文件的保存地址！"));
		return;
	}
	ProductPointerArray.RemoveAll();
	PartNameArray.RemoveAll();
	m_nCount = 0;
	HRESULT rc = S_OK;
	CheckFolderAndFile();
	CATDocument *pDoc = pDocument->GetCurrentDocument();
	CATIProduct_var spRootProd = pDocument->GetProductOnRoot(pDoc);
	if (spRootProd == NULL_var)
	{
		AfxMessageBox(_T("请打开一个文件！"));
		return;
	}
	strProductPath = pDocument->GetProductPath(spRootProd);
	if (strProductPath == _T(""))
	{
		AfxMessageBox(_T("请打开一个文件！"));
		return;
	}
	CATListValCATBaseUnknown_var* DirChildren = spRootProd->GetChildren();
	if (DirChildren != NULL)
	{
		CATIProduct_var spChild = NULL_var;
		for (int i=1;i<=DirChildren->Size();i++)
		{
			spChild = (*DirChildren)[i];
			pDocument->GetProductPointer(spChild,ProductPointerArray);
		}
	}
	GetPartNameArray(ProductPointerArray);
	GetCGRPartNameArray(PartNameArray);
	//隐藏所有零部件
	for (int i=0; i<ProductPointerArray.GetSize(); i++)
	{
		pDocument->ShowOrHideElement(ProductPointerArray.GetAt(i),"Hide");
	}
	//逐个显示零部件并执行该宏命令
	for (int i=0; i<ProductPointerArray.GetSize(); i++)
	{
		pDocument->ShowOrHideElement(ProductPointerArray.GetAt(i),"Show");
		pVBAScript->SetScriptContent(pCgrConversion->strCGRPath,GetPartName(ProductPointerArray.GetAt(i)));
		pCgrConversion->GetCurrentMacroCode();
		pVBAScript->ExecuteCATScript("CgrConversion.catvbs");
		pDocument->ShowOrHideElement(ProductPointerArray.GetAt(i),"Hide");
	}
	//显示所有零部件
	for (int i=0; i<ProductPointerArray.GetSize(); i++)
	{
		pDocument->ShowOrHideElement(ProductPointerArray.GetAt(i),"Show");
	}
	AfxMessageBox(_T("CGR批量转换结束！"));
}

CATBoolean BITCgrConversionCmd::GetPartNameArray(CArray<CATIProduct_var,CATIProduct_var> &ProductPointerArray)
{
	if (ProductPointerArray.GetSize() == 0)
	{
		return FALSE;
	}
	m_nCount = 0;
	CString strPartName;
	CATUnicodeString instanceName;
	wchar_t charTmp[100] = {0};

	CATIPrdProperties_var spPrdProperties;
	CString strDiscription;
	CATUnicodeString discription;
	wchar_t charTemp[100] = {0};

	ProductPointerArray.GetAt(0)->GetPrdInstanceName(instanceName);
	instanceName.ConvertToWChar(charTmp);
	strPartName.Format(_T("%s"),charTmp);
	if (strPartName == _T("0"))
	{
		m_nCount = 1;
	}
	//m_nCount为0时，采用零部件的名称命名，m_nCount为1时采用零部件的描述命名
	if (m_nCount == 0)
	{
		for (int i=0; i<ProductPointerArray.GetSize(); i++)
		{
			ProductPointerArray.GetAt(i)->GetPrdInstanceName(instanceName);
			instanceName.ConvertToWChar(charTmp);
			strPartName.Format(_T("%s"),charTmp);
			PartNameArray.Add(strPartName);
		}
	}
	else
	{
		for (int i=0; i<ProductPointerArray.GetSize(); i++)
		{
			spPrdProperties = ProductPointerArray.GetAt(i);
			if (spPrdProperties != NULL_var)
			{
				spPrdProperties->GetDescriptionInst(discription);
				discription.ConvertToWChar(charTemp);
				strDiscription.Format(_T("%s"),charTemp);
				PartNameArray.Add(strDiscription);
			}
		}
	}

	return TRUE;
}

CATBoolean BITCgrConversionCmd::GetCGRPartNameArray(CArray<CString,CString> &PartNameArray)
{
	if (PartNameArray.GetSize() == 0)
	{
		return FALSE;
	}

	bool flag = false;//避免重复添加
	for (int i=0; i<PartNameArray.GetSize(); i++)
	{
		int number = 0;
		CString strName = PartNameArray.GetAt(i);
		for (int k=0; k<CGRPartNameArray.GetSize(); k++)
		{
			if (strName == CGRPartNameArray.GetAt(k)->m_strPartName)
			{
				flag = true;
				break;
			}
		}
		if (flag == false)
		{
			for (int j=0; j<PartNameArray.GetSize(); j++)
			{
				if (strName == PartNameArray.GetAt(j))
				{
					number++;
				}
			}
			if (number > 1)
			{
				CGRPartName *m_pCGRPartName = new CGRPartName();
				m_pCGRPartName->m_strPartName = strName;
				m_pCGRPartName->count = 0;
				m_pCGRPartName->num = number;
				CGRPartNameArray.Add(m_pCGRPartName);
			}
		}
		flag = false;
	}
	return TRUE;
}

CString BITCgrConversionCmd::GetPartName(CATIProduct_var spProduct)
{
	CString strPartName;
	CATUnicodeString instanceName;
	wchar_t charTmp[100] = {0};

	CATIPrdProperties_var spPrdProperties;
	CString strDiscription;
	CATUnicodeString discription;
	wchar_t charTemp[100] = {0};
	if (m_nCount == 0)
	{
		spProduct->GetPrdInstanceName(instanceName);
		instanceName.ConvertToWChar(charTmp);
		strPartName.Format(_T("%s"),charTmp);
		strPartName = CheckPartName(strPartName);
	}
	else
	{
		spPrdProperties = spProduct;
		if (spPrdProperties != NULL_var)
		{
			spPrdProperties->GetDescriptionInst(discription);
			discription.ConvertToWChar(charTemp);
			strDiscription.Format(_T("%s"),charTemp);
			strDiscription = CheckPartName(strDiscription);

			return strDiscription;
		}
	}

	return strPartName;
}

CATBoolean BITCgrConversionCmd::CheckNum(CString strPartName)
{
	CATBoolean flag = FALSE;
	int count = 0;
	for (int i=0; i<strPartName.GetLength(); i++)
	{
		if (((int)strPartName.GetAt(i)>=48)&&((int)strPartName.GetAt(i)<=57))
		{
			count ++;
		}
	}
	if (count == strPartName.GetLength())
	{
		flag = TRUE;
	}

	return flag;
}

CString BITCgrConversionCmd::CheckPartName(CString strPartName)
{
	CString strName = _T("");
	for (int i=0; i<CGRPartNameArray.GetSize(); i++)
	{
		strName = CGRPartNameArray.GetAt(i)->m_strPartName;
		if (strPartName == strName)
		{
			CGRPartNameArray.GetAt(i)->count++;
			strPartName.Format(_T("%s_%d"),strPartName,CGRPartNameArray.GetAt(i)->count);
			break;
		}
	}

	return strPartName;
}
