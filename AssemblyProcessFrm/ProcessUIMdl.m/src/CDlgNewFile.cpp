// COPYRIGHT Dassault Systemes 2015
//===================================================================
//
// CDlgNewFile.cpp
// The dialog : CDlgNewFile
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//
//  Oct 2015  Creation: Code generated by the CAA wizard  WANGJIAPENG
//===================================================================
#include "CDlgNewFile.h"
#include "CATApplicationFrame.h"
#include "CATDlgGridConstraints.h"
#include "CATMsgCatalog.h"
#ifdef CDlgNewFile_ParameterEditorInclude
#include "CATIParameterEditorFactory.h"
#include "CATIParameterEditor.h"
#include "CATICkeParm.h"
#endif




//-------------------------------------------------------------------------
// Constructor
//-------------------------------------------------------------------------
CDlgNewFile::CDlgNewFile() :
  CATDlgDialog ((CATApplicationFrame::GetApplicationFrame())->GetMainWindow(),
//CAA2 WIZARD CONSTRUCTOR DECLARATION SECTION
"CDlgNewFile",CATDlgWndModal|CATDlgWndBtnOKCancel|CATDlgGridLayout
//END CAA2 WIZARD CONSTRUCTOR DECLARATION SECTION
                               )
{
//CAA2 WIZARD CONSTRUCTOR INITIALIZATION SECTION
 _EditorNewFolder = NULL;
 _PushButtonNewFolder = NULL;
//END CAA2 WIZARD CONSTRUCTOR INITIALIZATION SECTION
 pStringObject = CATStringObject::GetInstance();
}

//-------------------------------------------------------------------------
// Destructor
//-------------------------------------------------------------------------
CDlgNewFile::~CDlgNewFile()
{
//  Do not delete the control elements of your dialog: 
//     this is done automatically
//  --------------------------------------------------
//CAA2 WIZARD DESTRUCTOR DECLARATION SECTION
 _EditorNewFolder = NULL;
 _PushButtonNewFolder = NULL;
//END CAA2 WIZARD DESTRUCTOR DECLARATION SECTION
}



void CDlgNewFile::Build()
{
//  TODO: This call builds your dialog from the layout declaration file
//  -------------------------------------------------------------------

//CAA2 WIZARD WIDGET CONSTRUCTION SECTION
 SetGridColumnResizable(0,1);
 _EditorNewFolder = new CATDlgEditor(this, "EditorNewFolder");
_EditorNewFolder -> SetGridConstraints(0, 0, 1, 1, CATGRID_4SIDES);
 _PushButtonNewFolder = new CATDlgPushButton(this, "PushButtonNewFolder");
_PushButtonNewFolder -> SetGridConstraints(0, 1, 1, 1, CATGRID_4SIDES);
//END CAA2 WIZARD WIDGET CONSTRUCTION SECTION

//END CAA2 WIZARD WIDGET CONSTRUCTION SECTION
//END CAA2 WIZARD WIDGET CONSTRUCTION SECTION
GetProcessFolder(ProcessFolderArray);
//CAA2 WIZARD CALLBACK DECLARATION SECTION
     AddAnalyseNotificationCB (_PushButtonNewFolder, 
                               _PushButtonNewFolder->GetPushBActivateNotification(),
                               (CATCommandMethod)&CDlgNewFile::OnPushButtonNewFolderPushBActivateNotification,
                               NULL);
//END CAA2 WIZARD CALLBACK DECLARATION SECTION
 CATDlgWindow *pFrmWindow = NULL;
 pFrmWindow = (CATApplicationFrame::GetApplicationFrame())->GetApplicationDocument();
 DRECT rect;
 pFrmWindow->GetRectDimensions(&rect);
 int width = 400;
 int height = 70;
 this->SetRectDimensions((rect.dx-width)/2,(rect.dy-height)/2,height,width);
}

//-------------------------------------------------------------------------
// Callback on PushBActivate of _PushButtonNewFolder
//-------------------------------------------------------------------------
void CDlgNewFile::OnPushButtonNewFolderPushBActivateNotification(CATCommand* cmd, CATNotification* evt, CATCommandClientData data)
{
  // Add your code here
  CATFile* pFile = CATFile::GetInstance();
  strFolderPath = pFile->OpenOneFolder();
  if (!CheckFolderPath(strFolderPath))
  {
	  AfxMessageBox(_T("该项目已创建！"));
	  return;
  }
  _EditorNewFolder->SetLine(pStringObject->ConvertToCATString(strFolderPath));
}

CATBoolean CDlgNewFile::GetProcessFolder(CArray<CString,CString> &ProcessFolderArray)
{
	ProcessFolderArray.RemoveAll();
	CString strContent;
	CString strPath = pStringObject->GetProgramPath();
	strPath = strPath + _T("\\Settings.txt");
	CStdioFile fifFile(strPath,CFile::modeRead|CFile::modeReadWrite);
	fifFile.ReadString(strContent);
	fifFile.ReadString(strContent);
	if (strContent == _T(""))
	{
		fifFile.Close();
		return FALSE;
	}
	else
	{
		int num = _ttoi(strContent);
		for (int i=0; i<num; i++)
		{
			fifFile.ReadString(strContent);
			if (!PathIsDirectory(strContent))
			{
				continue;
			}
			ProcessFolderArray.Add(strContent);
		}
	}
	fifFile.Close();

	return TRUE;
}

CATBoolean CDlgNewFile::CheckFolderPath(CString strPath)
{
	for (int i=0; i<ProcessFolderArray.GetSize(); i++)
	{
		if (strPath == ProcessFolderArray.GetAt(i))
		{
			return FALSE;
		}
	}
	CString string;
	int num = 0;
	if (strPath != _T(""))
	{
		string = strPath + _T("\\Picture");
		if (PathIsDirectory(string))
		{
			num++;
		}
		string = strPath + _T("\\Excel");
		if (PathIsDirectory(string))
		{
			num++;
		}
		string = strPath + _T("\\Html");
		if (PathIsDirectory(string))
		{
			num++;
		}
		string = strPath + _T("\\Video");
		if (PathIsDirectory(string))
		{
			num++;
		}
		string = strPath + _T("\\Model");
		if (PathIsDirectory(string))
		{
			num++;
		}
		string = strPath + _T("\\DMPlayer");
		if (PathIsDirectory(string))
		{
			string = strPath + _T("\\DMPlayer") + _T("\\DMPlayer.exe");
			if (PathFileExists(string))
			{
				string = strPath + _T("\\DMPlayer") + _T("\\Settings.ini");
				if (PathFileExists(string))
				{
					if (num == 5)
					{
						return FALSE;
					}
				}
			}
		}
	}

	return TRUE;
}

CATBoolean CDlgNewFile::SetFileContent()
{
	CString strPath = pStringObject->GetProgramPath();
	strPath = strPath + _T("\\Settings.txt");
	CStdioFile fifFile(strPath,CFile::modeCreate|CFile::modeReadWrite);
	CString strContent;
	fifFile.WriteString(strFolderPath);
	fifFile.WriteString(_T("\n"));
	int num = ProcessFolderArray.GetSize() + 1;
	strContent.Format(_T("%d"),num);
	fifFile.WriteString(strContent);
	fifFile.WriteString(_T("\n"));
	for (int i=0; i<ProcessFolderArray.GetSize(); i++)
	{
		fifFile.WriteString(ProcessFolderArray.GetAt(i));
		fifFile.WriteString(_T("\n"));
	}
	fifFile.WriteString(strFolderPath);
	fifFile.Close();
	CString string;
	string = strFolderPath + _T("\\Picture");
	::CreateDirectory(string,NULL);
	string = strFolderPath + _T("\\Excel");
	::CreateDirectory(string,NULL);
	string = strFolderPath + _T("\\Html");
	::CreateDirectory(string,NULL);
	string = strFolderPath + _T("\\Video");
	::CreateDirectory(string,NULL);
	string = strFolderPath + _T("\\Model");
	::CreateDirectory(string,NULL);
	string = strFolderPath + _T("\\DMPlayer");
	::CreateDirectory(string,NULL);
	//复制视频播放器到工作目录下
	strPath = pStringObject->GetProgramPath();
	strPath = strPath + _T("\\DMPlayer.exe");
	string = strFolderPath + _T("\\DMPlayer") + _T("\\DMPlayer.exe");
	BOOL bFlag = CopyFile(strPath,string,FALSE);
	if (!bFlag)
	{
		return FALSE;
	}
	strPath = pStringObject->GetProgramPath();
	strPath = strPath + _T("\\Settings.ini");
	string = strFolderPath + _T("\\DMPlayer") + _T("\\Settings.ini");
	bFlag = CopyFile(strPath,string,FALSE);
	if (!bFlag)
	{
		return FALSE;
	}

	return TRUE;
}
