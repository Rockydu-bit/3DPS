// COPYRIGHT Dassault Systemes 2015
//===================================================================
//
// OutPutProcessCmd.cpp
// The state chart based command: OutPutProcessCmd
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//
//  Nov 2015  Creation: Code generated by the CAA wizard  WANGJIAPENG
//===================================================================
#include "OutPutProcessCmd.h"

#include "CATCreateExternalObject.h"
CATCreateClass( OutPutProcessCmd);


//-------------------------------------------------------------------------
// Constructor
//-------------------------------------------------------------------------
OutPutProcessCmd::OutPutProcessCmd() :
  CATStateCommand ("OutPutProcessCmd", CATDlgEngOneShot, CATCommandModeExclusive) 
//  Valid states are CATDlgEngOneShot and CATDlgEngRepeat
, pCancelBut(NULL), pCloseBut(NULL)
{
	pDlgOutputFile = new CDlgOutputFile();
	pDlgOutputFile->Build();
	pDlgOutputFile->SetVisibility(CATDlgShow);
}

//-------------------------------------------------------------------------
// Destructor
//-------------------------------------------------------------------------
OutPutProcessCmd::~OutPutProcessCmd()
{
	if (pCancelBut != NULL)
	{
		pCancelBut->RequestDelayedDestruction();
		pCancelBut = NULL;
	}
	if (pCloseBut != NULL)
	{
		pCloseBut->RequestDelayedDestruction();
		pCloseBut = NULL;
	}
	if (pDlgOutputFile != NULL) 
	{
		pDlgOutputFile->RequestDelayedDestruction();
		pDlgOutputFile = NULL;
	}
}


//-------------------------------------------------------------------------
// BuildGraph()
//-------------------------------------------------------------------------
void OutPutProcessCmd::BuildGraph()
{
	pCloseBut = new CATDialogAgent("Close");
	pCancelBut = new CATDialogAgent("Cancel");

	pCancelBut->AcceptOnNotify(pDlgOutputFile,pDlgOutputFile->GetWindCloseNotification());
	pCloseBut->AcceptOnNotify(pDlgOutputFile,pDlgOutputFile->GetDiaCANCELNotification());

	CATDialogState* pState = GetInitialState("OK");
	pState->AddDialogAgent(pCloseBut);
	pState->AddDialogAgent(pCancelBut);

	AddTransition(pState,NULL,IsOutputSetCondition(pCloseBut),Action((ActionMethod)&OutPutProcessCmd::ActionClose));
	AddTransition(pState,NULL,IsOutputSetCondition(pCancelBut),Action((ActionMethod)&OutPutProcessCmd::ActionCancel));
}

CATBoolean OutPutProcessCmd::ActionCancel( void *data )
{
	// TODO: Define the action associated with the transition 
	// ------------------------------------------------------
	if (pDlgOutputFile)
	{
		pDlgOutputFile->RequestDelayedDestruction();
		pDlgOutputFile = NULL;
	}

	return TRUE;
}

CATBoolean OutPutProcessCmd::ActionClose( void *data )
{
	// TODO: Define the action associated with the transition 
	// ------------------------------------------------------
	if (pDlgOutputFile)
	{
		pDlgOutputFile->RequestDelayedDestruction();
		pDlgOutputFile = NULL;
	}

	return TRUE;
}
