// COPYRIGHT Dassault Systemes 2016
//===================================================================
//
// FuzzyModelCmd.cpp
// The state chart based command: FuzzyModelCmd
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//
//  Dec 2016  Creation: Code generated by the CAA wizard  WANGJIAPENG
//===================================================================
#include "FuzzyModelCmd.h"
#include "CATIndicationAgent.h"
#include "CATMathPlane.h"

#include "CATCreateExternalObject.h"
CATCreateClass( FuzzyModelCmd);


//-------------------------------------------------------------------------
// Constructor
//-------------------------------------------------------------------------
FuzzyModelCmd::FuzzyModelCmd() :
  CATStateCommand ("FuzzyModelCmd", CATDlgEngOneShot, CATCommandModeExclusive) 
//  Valid states are CATDlgEngOneShot and CATDlgEngRepeat
, pOkBut(NULL), pCancelBut(NULL), pCloseBut(NULL)
{
	pDlgFuzzyModel = new CDlgFuzzyModel();
	pDlgFuzzyModel->Build();
	pDlgFuzzyModel->SetVisibility(CATDlgShow);
}

//-------------------------------------------------------------------------
// Destructor
//-------------------------------------------------------------------------
FuzzyModelCmd::~FuzzyModelCmd()
{
	if (pOkBut != NULL)
	{
		pOkBut->RequestDelayedDestruction();
		pOkBut = NULL;
	}
	if (pCancelBut != NULL)
	{
		pCancelBut->RequestDelayedDestruction();
		pCancelBut = NULL;
	}
	if (pCloseBut != NULL)
	{
		pCloseBut->RequestDelayedDestruction();
		pCloseBut = NULL;
	}
	if (pDlgFuzzyModel != NULL) 
	{
		pDlgFuzzyModel->RequestDelayedDestruction();
		pDlgFuzzyModel = NULL;
	}
}


//-------------------------------------------------------------------------
// BuildGraph()
//-------------------------------------------------------------------------
void FuzzyModelCmd::BuildGraph()
{


  // TODO: Define the StateChart 
  // ---------------------------
	pOkBut = new CATDialogAgent("OK");
	pCloseBut = new CATDialogAgent("Close");
	pCancelBut = new CATDialogAgent("Cancel");

	pOkBut->AcceptOnNotify(pDlgFuzzyModel,pDlgFuzzyModel->GetDiaOKNotification());
	pCancelBut->AcceptOnNotify(pDlgFuzzyModel,pDlgFuzzyModel->GetWindCloseNotification());
	pCloseBut->AcceptOnNotify(pDlgFuzzyModel,pDlgFuzzyModel->GetDiaCANCELNotification());

	CATDialogState* pState = GetInitialState("OK");
	pState->AddDialogAgent(pOkBut);
	pState->AddDialogAgent(pCloseBut);
	pState->AddDialogAgent(pCancelBut);

	AddTransition(pState,NULL,IsOutputSetCondition(pOkBut),Action((ActionMethod)&FuzzyModelCmd::ActionOK));
	AddTransition(pState,NULL,IsOutputSetCondition(pCloseBut),Action((ActionMethod)&FuzzyModelCmd::ActionClose));
	AddTransition(pState,NULL,IsOutputSetCondition(pCancelBut),Action((ActionMethod)&FuzzyModelCmd::ActionCancel));
}


//-------------------------------------------------------------------------
// ActionOne ()
//-------------------------------------------------------------------------
CATBoolean FuzzyModelCmd::ActionOne( void *data )
{
  // TODO: Define the action associated with the transition 
  // ------------------------------------------------------

  return TRUE;
}

CATBoolean FuzzyModelCmd::ActionOK( void *data )
{
	// TODO: Define the action associated with the transition 
	// ------------------------------------------------------
	if (pDlgFuzzyModel)
	{
		pDlgFuzzyModel->RequestDelayedDestruction();
		pDlgFuzzyModel = NULL;
	}
	return TRUE;
}

CATBoolean FuzzyModelCmd::ActionCancel( void *data )
{
	// TODO: Define the action associated with the transition 
	// ------------------------------------------------------
	if (pDlgFuzzyModel)
	{
		pDlgFuzzyModel->RequestDelayedDestruction();
		pDlgFuzzyModel = NULL;
	}

	return TRUE;
}

CATBoolean FuzzyModelCmd::ActionClose( void *data )
{
	// TODO: Define the action associated with the transition 
	// ------------------------------------------------------
	if (pDlgFuzzyModel)
	{
		pDlgFuzzyModel->RequestDelayedDestruction();
		pDlgFuzzyModel = NULL;
	}

	return TRUE;
}
